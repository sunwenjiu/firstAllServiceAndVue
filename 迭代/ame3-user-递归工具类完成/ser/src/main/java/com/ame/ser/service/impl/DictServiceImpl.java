package com.ame.ser.service.impl;import com.ame.ser.enums.DictTypeEnum;import com.ame.ser.model.Dict;import com.ame.ser.repository.DictRepository;import com.ame.ser.service.DictService;import org.springframework.stereotype.Service;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.service.ex.TableFieldContentDuplicateException;import com.ame.ser.utils.PrimaryKeyUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.List;import java.util.Optional;/** * 字典库业务层实现类 * @author SWJ */@Servicepublic class DictServiceImpl implements DictService {    private static Logger logger = LoggerFactory.getLogger(DictServiceImpl.class);    @Autowired    private DictRepository dictRepository;    @Override    public void createDict(Dict dict) throws TableFieldContentDuplicateException {        Dict result = dictRepository.getByName(dict.getName());        System.out.println("结果："+result);        if (result == null ) {  //|| result.getDictType() !=dict.getDictType()看看是否需要类型不同            String id = PrimaryKeyUtil.getPrimaryId();            dict.setDictId(id);            Date newTime = new Date();            dict.setCreateTime(newTime);            dict.setUpdateTime(newTime);            //保存持久层            dictRepository.saveAndFlush(dict);        }else {            throw new TableFieldContentDuplicateException("字典已经存在了，不能新建");        }    }    @Override    public Page<Dict> findAllPage(int pageNo, int pageSize) {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<Dict> dicts = dictRepository.findAll(pageable);        return dicts;    }    @Override    public void delDictById(String dictId) {        try {            dictRepository.deleteById(dictId);        }catch (EmptyResultDataAccessException e){            throw new ParameterInvalidException("传入的参数有误，数据不存在");        }    }    @Transactional    @Override    public void deleteByDictIdIn(List<String > ids) {        try {            dictRepository.deleteByDictIdIn(ids);        }catch (Exception e){            throw new ParameterInvalidException("传入的参数有误");        }    }    @Override    public void update(String dictId, String name, String dictDescribe, DictTypeEnum dictType) {        Optional<Dict> byId = dictRepository.findById(dictId);        if (!byId.isPresent()) {            throw new ParameterInvalidException("传入的参数有误");        }        Dict dict =  byId.get();            //修改名字相同的其他信息        if (name.equals(dict.getName()) ) {            dict.setDictType(dictType);            dict.setDictDescribe(dictDescribe);            dict.setUpdateTime(new Date());            dictRepository.saveAndFlush(dict);            return;        }        //修改名字不同的所以信息        Dict result = dictRepository.getByName(name);        if (result !=null) {            throw new TableFieldContentDuplicateException("字典存在了，不能创建.");        }        dict.setDictType(dictType);        dict.setName(name);        dict.setDictDescribe(dictDescribe);        dict.setUpdateTime(new Date());        dictRepository.saveAndFlush(dict);    }}