package com.ame.ser.service.impl;import com.ame.ser.model.EventLevel;import com.ame.ser.repository.EventLevelRepository;import com.ame.ser.service.EventLevelService;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.service.ex.TableFieldContentDuplicateException;import com.ame.ser.utils.PrimaryKeyUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import java.util.Date;import java.util.List;import java.util.Optional;/** * 事件等级业务层实现类 * @author SWJ */@Servicepublic class EventLevelServiceImpl implements EventLevelService {    private static Logger logger = LoggerFactory.getLogger(EventLevelServiceImpl.class);    @Autowired    private EventLevelRepository eventLevelRepository;    @Override    public void createEventLevel(EventLevel eventLevel) throws TableFieldContentDuplicateException {        EventLevel result = eventLevelRepository.getByName(eventLevel.getName());        logger.info("结果{}",result);        if (result == null) {            String id = PrimaryKeyUtil.getPrimaryId();            eventLevel.setEventLevelId(id);            Date newTime = new Date();            eventLevel.setCreateTime(newTime);            eventLevel.setUpdateTime(newTime);            //保存持久层            eventLevelRepository.saveAndFlush(eventLevel);        }else {            throw new TableFieldContentDuplicateException("事件等级已经存在了，不能新建");        }    }    @Override    public Page<EventLevel> findAllPage(int pageNo, int pageSize) {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<EventLevel> eventLevels = eventLevelRepository.findAll(pageable);        return eventLevels;    }    @Override    public void delEventLevelById(String eventLevelId) {        try {            eventLevelRepository.deleteById(eventLevelId);        }catch (EmptyResultDataAccessException e){            throw new ParameterInvalidException("传入的参数有误，数据不存在");        }    }    @Override    public void deleteByEventLevelIdIn(List<String > ids) {        try {            eventLevelRepository.deleteByEventLevelIdIn(ids);        }catch (Exception e){            throw new ParameterInvalidException("传入的参数有误");        }    }    @Override    public void update(String eventLevelId, String name, String eventLevelDescribe) {        Optional<EventLevel> byId = eventLevelRepository.findById(eventLevelId);        if (!byId.isPresent()) {            throw new ParameterInvalidException("传入的参数有误");        }        EventLevel eventLevel =  byId.get();        if (name.equals(eventLevel.getName())) {            eventLevel.setEventLevelDescribe(eventLevelDescribe);            eventLevel.setUpdateTime(new Date());            eventLevelRepository.saveAndFlush(eventLevel);            return;        }        EventLevel result = eventLevelRepository.getByName(name);        if (result !=null) {            throw new TableFieldContentDuplicateException("事件等级已存在了，不能创建.");        }        eventLevel.setName(name);        eventLevel.setEventLevelDescribe(eventLevelDescribe);        eventLevel.setUpdateTime(new Date());        eventLevelRepository.saveAndFlush(eventLevel);    }}