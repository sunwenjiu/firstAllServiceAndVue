package com.ame.ser.service.impl;import com.ame.ser.controllerEx.ParameterInvalidException;import com.ame.ser.repository.WardRepository;import com.ame.ser.model.Ward;import com.ame.ser.service.WardService;import com.ame.ser.serviceEx.TableFieldContentDuplicateException;import com.ame.ser.utils.PrimaryKeyUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import java.util.Date;import java.util.List;import java.util.Optional;/** * 病区业务层实现类 */@Servicepublic class WardServiceImpl implements WardService {    private static Logger logger = LoggerFactory.getLogger(WardServiceImpl.class);    @Autowired    private WardRepository wardRepository;    @Override    public void createWard(Ward ward) throws TableFieldContentDuplicateException {        Ward result = wardRepository.getByName(ward.getName());            logger.info("结果{}",result);        if (result == null) {            String id = PrimaryKeyUtil.getPrimaryId();            ward.setWardId(id);            Date newTime = new Date();            ward.setCreateTime(newTime);            ward.setUpdateTime(newTime);            //保存持久层            wardRepository.saveAndFlush(ward);        }else {            throw new TableFieldContentDuplicateException("病区已经存在了，不能新建");        }    }    @Override    public Page<Ward> findAllPage(int pageNo, int pageSize) {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<Ward> wards = wardRepository.findAll(pageable);        return wards;    }    @Override    public void delWardById(String wardId) {        try {            wardRepository.deleteById(wardId);        }catch (EmptyResultDataAccessException e){            throw new ParameterInvalidException("传入的参数有误，数据不存在");        }    }    @Override    public void deleteByWardIdIn(List<String > ids) {        try {            wardRepository.deleteByWardIdIn(ids);        }catch (Exception e){            throw new ParameterInvalidException("传入的参数有误");        }    }    @Override    public void update(String wardId, String name, String wardDescribe) {        Optional<Ward> byId = wardRepository.findById(wardId);        if (!byId.isPresent()) {            throw new ParameterInvalidException("传入的参数有误");        }        Ward ward =  byId.get();        if (name.equals(ward.getName())) {            ward.setWardDescribe(wardDescribe);            ward.setUpdateTime(new Date());            wardRepository.saveAndFlush(ward);            return;        }        Ward result = wardRepository.getByName(name);        if (result !=null) {            throw new TableFieldContentDuplicateException("病区存在了，不能创建.");        }        ward.setName(name);        ward.setWardDescribe(wardDescribe);        ward.setUpdateTime(new Date());        wardRepository.saveAndFlush(ward);    }}