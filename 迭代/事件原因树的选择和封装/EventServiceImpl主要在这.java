package com.ame.ser.service.impl;import com.ame.ser.dto.EventDTO;import com.ame.ser.model.Event;import com.ame.ser.repository.EventReasonRepository;import com.ame.ser.repository.EventRepository;import com.ame.ser.service.EventService;import com.ame.ser.service.ex.ParameterInvalidException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;/** * 事件的业务层实现类 * @author SWJ */@Servicepublic class EventServiceImpl implements EventService {    private static Logger logger = LoggerFactory.getLogger(EventServiceImpl.class);    @Autowired    private EventRepository eventRepository;    @Autowired    private EventReasonRepository eventReasonRepository;    @Override    public void createEvent(EventDTO eventDTO) {        //处理事件原因节点        String eventReasonSonIds= eventDTO.getEventReasonSonIds();        // /* 前端封装原因id格式为    主-子+子,主-子+子,主-子+子     */       List<List<String>> result = reasonTree(eventReasonSonIds);        System.out.println(result);    }     /**     * 将原因节点进行第一级解封     * 返回的格式为，每个最小的集合的前一个是主原因，后一个是子原因     *[[871909c4a0084447be3f615730dbb3d3, 164956dc3bff47cea04b659e7449cea8], [871909c4a0084447be3f615730dbb3d3, d855d157cb794410a763e3acf9163eb6], [ecc7dae14fad4e388d77dd7441348ffc, bc1b7199a5f64f3aa1e87e6adaf18df1], [ecc7dae14fad4e388d77dd7441348ffc, 427ffdd821564a9ba3698fcb618c8164]]     *     * @param eventReasonSonIds     */    private List<List<String>>  reasonTree(String eventReasonSonIds){        List<List<String>>  totalResult = new ArrayList<>();        if (eventReasonSonIds.indexOf(",") == -1){            //只有一个主原因            getReason(eventReasonSonIds,totalResult);        }else {            //有多个主原因            //将多个原因转为数组            String[]  reasonIds= eventReasonSonIds.split(",");            for (String s:reasonIds ) {                getReason(s,totalResult);            }        }        return totalResult;    }    /**     * 解除封装的原因第二级，每一个主原因加子原因的封装     * 返回的格式如：[     *     // [871909c4a0084447be3f615730dbb3d3, 164956dc3bff47cea04b659e7449cea8],     *     // [871909c4a0084447be3f615730dbb3d3, d855d157cb794410a763e3acf9163eb6],     *     // [ecc7dae14fad4e388d77dd7441348ffc, bc1b7199a5f64f3aa1e87e6adaf18df1],     *     // [ecc7dae14fad4e388d77dd7441348ffc, 427ffdd821564a9ba3698fcb618c8164]     *     // ]     *     * @param ids 每一个主原因加子原因的封装元素     * @return     */    private List<List<String>> getReason(String ids ,List<List<String>> resulrAll){        if (ids.indexOf("-") != -1){           String[] treeIds= ids.split("-"); //一个主原因，加多个子原因            //将子原因截取出来            if (treeIds[1].indexOf("+") == -1){                //只有一个子原因                List<String> resulr = new ArrayList<>();                resulr.add(new String(treeIds[0]));                resulr.add(new String(treeIds[1]));                resulrAll.add(resulr);            }else {                //有多个子原因                String[] sonIds =treeIds[1].split("\\+");                for (String s:sonIds                     ) {                    List<String> resulr = new ArrayList<>();                    resulr.add(new String(treeIds[0]));                    resulr.add(new String(s));                    resulrAll.add(resulr);                }            }        }else {            throw new ParameterInvalidException("请求的数据有误");        }            return resulrAll;    }}