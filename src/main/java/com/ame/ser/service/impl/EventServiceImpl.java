package com.ame.ser.service.impl;import com.ame.ser.config.WebSocket;import com.ame.ser.dto.EventDTO;import com.ame.ser.dto.EventSearchDTO;import com.ame.ser.dto.EventTaskUserDTO;import com.ame.ser.enums.EventStatusEnum;import com.ame.ser.enums.MessageTitleAndContentEnum;import com.ame.ser.enums.SexEnum;import com.ame.ser.model.*;import com.ame.ser.enums.UserTypeEnum;import com.ame.ser.model.*;import com.ame.ser.repository.*;import com.ame.ser.service.EventService;import com.ame.ser.service.MessageService;import com.ame.ser.service.SetEventTaskService;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.utils.DateUtil;import com.ame.ser.utils.ExportWordUtil;import com.ame.ser.utils.JsonUtil;import com.ame.ser.utils.PrimaryKeyUtil;import com.ame.ser.vo.*;import org.apache.commons.collections.MapUtils;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.criteria.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.time.LocalDate;import java.util.*;/** * 事件的业务层实现类 * * @author SWJ */@Servicepublic class EventServiceImpl implements EventService {    private static Logger logger = LoggerFactory.getLogger(EventServiceImpl.class);    @Autowired    private EventRepository eventRepository;    /**     * 事件的原因持久层     */    @Autowired    private EventReasonRepository eventReasonRepository;    /**     * 事件原因树表     */    @Autowired    private EventReasonTreeRepository eventReasonTreeRepository;    /**     * 事件类型表     */    @Autowired    private EventTypeRepository eventTypeRepository;    @Autowired    private SetEventTaskService setEventTaskService;    @Autowired    private MessageService messageService;    @Autowired    private WebSocket webSocket;    @Autowired    private EventLevelRepository eventLevelRepository;    @Autowired    private UserRepository userRepository;    /**     * 创建事件     *     * @param eventDTO 前端传入的事件填报数据DTO     */    @Transactional    @Override    public void createEvent(EventDTO eventDTO) {        //处理事件原因节点        String eventReasonSonIds = eventDTO.getEventReasonSonIds();        // /* 前端封装原因id格式为    主-子+子,主-子+子,主-子+子     */        List<List<String>> eventReasonResult = reasonTree(eventReasonSonIds);        Date now = new Date();        //封装事件ID uuid,        String eventId = PrimaryKeyUtil.getPrimaryId();        Event event = new Event();        //封装事件（用私有方法）        setEvent(eventDTO, event, eventId, now);        // 驳回后重新提交 有id        if (StringUtils.isNotEmpty(eventDTO.getEventId())){            event.setEventId(eventDTO.getEventId());            //删除之前的原因           int count= eventReasonRepository.deleteByEventId(event);          //  System.out.println("=============="+count);        }        eventRepository.saveAndFlush(event);        //持久化EventReason        // int index =0;        for (List<String> listString : eventReasonResult) {            String eventReasonId = PrimaryKeyUtil.getPrimaryId(); //事件原因id            String treeId = listString.get(0);            String sonId = listString.get(1);            //  System.out.println("eventReasonResult下标为"+index +"treeid:"+treeId+";sonid:"+sonId);            // index++;            //通过id取出名字            String treeName = eventReasonTreeRepository.findById(treeId).get().getName();            String sonName = eventReasonTreeRepository.findById(sonId).get().getName();            if (treeName == null || sonName == null) {                throw new ParameterInvalidException("传入的原因ID，未匹配到数据");            }            EventReason eventReason = new EventReason();            eventReason.setEventReasonId(eventReasonId);            eventReason.setEventId(event);            eventReason.setEventReasonTreeId(treeId);            eventReason.setEventReasonTreeName(treeName);            eventReason.setEventReasonSonId(sonId);            eventReason.setEventReasonSonName(sonName);            eventReason.setCreateTime(now);            eventReason.setUpdateTime(now);            eventReasonRepository.saveAndFlush(eventReason);        }        //事件创建成功后需要，发送websocket，只需要创建新的消息就可以了        //看看这个一级分类需要发送给哪些人        List<EventTaskUser> listET =  setEventTaskService.getEventTaskUser(event.getEventTypeOneClassId());        //看看是否直报,看事件状态为1  还是2（看枚举）       Integer userType=event.getEventStatus() == EventStatusEnum.STATUSENUM_1.getCode()?1:event.getEventStatus() == EventStatusEnum.STATUSENUM_2.getCode()?2:0;        List<String> userIds =new ArrayList<>();        for (EventTaskUser et: listET             ) {            if(et.getUserType() == userType){                userIds.add(et.getUserId());            }        }        if(!userIds.isEmpty()){            String title =MessageTitleAndContentEnum.TITLE_1.getMessage();            String content = MessageTitleAndContentEnum.CONTENT_2.getMessage();            messageService.createMessage(userIds, eventDTO.getWriteUserId(),title ,content );        }    }    /**     * 事件填报页显示的数据     * @param userId     * @param pageNo     * @param pageSize     * @return     */    @Override    public Page<Event> findAllPageForIn(String userId, int pageNo, int pageSize) {        Specification<Event> specification = new Specification<Event>() {            private static final long serialVersionUID = 1L;            @Override            public Predicate toPredicate(Root<Event> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                Predicate condition1 = criteriaBuilder.equal(root.<String>get("writeUserId"), userId);                criteriaQuery.where(condition1);                return null;            }        };        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<Event> events = eventRepository.findAll(specification, pageable);        return events;    }    /**     * 事件处理页显示的     * @return     */    @Override    public Page<Event> findAllPageForHandler(Integer eventStatus, String userId, int pageNo, int pageSize) {        //查看该用户可以查看那些类型        //模拟数据        List<String> eventTypes = getListByUserId(UserTypeEnum.HANDLER.getCode(), userId);        Specification<Event> specification = new Specification<Event>() {            private static final long serialVersionUID = 1L;            @Override            public Predicate toPredicate(Root<Event> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                Predicate condition1 = criteriaBuilder.equal(root.<String>get("eventStatus"), eventStatus);                Predicate  condition2=null;                if(!eventTypes.isEmpty()&& eventStatus ==EventStatusEnum.STATUSENUM_1.getCode()){                    Path<Object> path = root.get("eventTypeOneClassId");                    CriteriaBuilder.In<Object> in = criteriaBuilder.in(path);                    for ( String s:eventTypes                            ) {                        in.value(s);                    }                      condition2 = criteriaBuilder.and(in);                }else if(eventStatus ==EventStatusEnum.STATUSENUM_2.getCode() || eventStatus ==EventStatusEnum.STATUSENUM_3.getCode()){                    //是空的                    //我是处理人不是审核人， 审核是空的，但我要看我处理过的且是待审核状态，                    //查看已驳回的  只能查看自己处理过的已驳回的                    condition2 = criteriaBuilder.equal(root.<String>get("handlerUserId"), userId);                }else {                    condition2 =criteriaBuilder.equal(root.<String>get("eventId"),"无须返回数据：非id即可" );                }                criteriaQuery.where(condition1,condition2);                return null;            }        };        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<Event> events = eventRepository.findAll(specification, pageable);        return events;    }    /**     * 事件审核页显示的     * @param eventStatus     * @param userId     * @param pageNo     * @param pageSize     * @return     */    @Override    public Page<Event> findAllPageForVerifier(Integer eventStatus, String userId, int pageNo, int pageSize) {        List<String> eventTypes = getListByUserId( UserTypeEnum.VERIFIER.getCode(), userId);        Specification<Event> specification = new Specification<Event>() {            private static final long serialVersionUID = 1L;            @Override            public Predicate toPredicate(Root<Event> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                Predicate condition1 = criteriaBuilder.equal(root.<String>get("eventStatus"), eventStatus);                Predicate  condition2=null;                if(!eventTypes.isEmpty()&& eventStatus ==EventStatusEnum.STATUSENUM_2.getCode()){                    Path<Object> path = root.get("eventTypeOneClassId");                    CriteriaBuilder.In<Object> in = criteriaBuilder.in(path);                    for ( String s:eventTypes                            ) {                        in.value(s);                    }                    condition2 = criteriaBuilder.and(in);                }  else if(eventStatus ==EventStatusEnum.STATUSENUM_3.getCode() ||  eventStatus ==EventStatusEnum.STATUSENUM_4.getCode() ){                    //查看已驳回的  能查看全部已驳回的  查看全部已经结案的                    condition2 = criteriaBuilder.notEqual(root.<String>get("eventId"), "字段不参与筛选：非id即可");                }                else {                    condition2 =criteriaBuilder.equal(root.<String>get("eventId"),"无须返回数据：非id即可" );                }                criteriaQuery.where(condition1,condition2);                return null;            }        };        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<Event> events = eventRepository.findAll(specification, pageable);        return events;    }    /**     * 通过一级分类ID，查看事件是否有待结案状态，如果有，不能增加处理人（不能改变是否直报状态）     * @param eventTypeOneClassId     * @return 0 可以增加处理人， >0  则不能增加处理人     */    @Override    public long getCountByEventTypeOneClassIdOnProcessed(String eventTypeOneClassId) {        Specification<Event> specification = new Specification<Event>() {            private static final long serialVersionUID = 1L;            @Override            public Predicate toPredicate(Root<Event> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                Predicate condition1 = criteriaBuilder.equal(root.<String>get("eventTypeOneClassId"), eventTypeOneClassId);               Predicate condition2 =criteriaBuilder.equal(root.<Integer>get("eventStatus"), EventStatusEnum.STATUSENUM_2.getCode());                criteriaQuery.where(condition1,condition2);                return null;            }        };              long count=  eventRepository.count(specification);        return count;    }    /**     * 处理人在对事件处理时的事件处理评价和建议措施     * @param eventEvaluateForHandler     * @param eventProposalForHandler     * @param eventId     * @param handlerUserId     */    @Transactional    @Override    public void updateForHandler(String eventEvaluateForHandler, String eventProposalForHandler, String eventId,String handlerUserId) {        //通过用户id判断该用户是否有处理该事件的权限        boolean result = getResultByEventIdAndUserId(eventId, handlerUserId, UserTypeEnum.HANDLER.getCode());        if(!result){            throw new ParameterInvalidException("你无权处理该事件");        }        //都通过了，需要把状态改为 待结案 状态        int eventStatus = EventStatusEnum.STATUSENUM_2.getCode();        try{           int write= eventRepository.updateForHandler(eventEvaluateForHandler, eventProposalForHandler, eventStatus, eventId, handlerUserId,new Date(),new Date());            if(write== 0){                throw new ParameterInvalidException("插入数据失败");            }        }catch (Exception e){            throw new ParameterInvalidException("出现未知错误，请检查传入数据是否有误");        }        //发送websocket提醒        String message = MessageTitleAndContentEnum.HANDLER_3.getMessage();        //事件处理了需要通知申请人和审核人        setWebsocket(eventId,message,UserTypeEnum.VERIFIER.getCode() );    }    /**     *处理人驳回时修改数据     * @param rejectReasonForHandler 驳回原因     * @param eventId  哪个事件     * @param handlerUserId 处理人     */    @Transactional    @Override    public void updateRejectForHandler(String rejectReasonForHandler, String eventId,String handlerUserId) {        boolean result = getResultByEventIdAndUserId(eventId, handlerUserId, UserTypeEnum.HANDLER.getCode());        if(!result){            throw new ParameterInvalidException("你无权处理该事件");        }        //都通过了，需要把状态改为 待结案 状态        int eventStatus = EventStatusEnum.STATUSENUM_3.getCode();        try{            int write= eventRepository.updateRejectForHandler(rejectReasonForHandler, eventStatus, eventId, handlerUserId,new Date(),new Date());            if(write== 0){                throw new ParameterInvalidException("插入数据失败");            }        }catch (Exception e){            throw new ParameterInvalidException("出现未知错误，请检查传入数据是否有误");        }        //发送websocket提醒        String message = MessageTitleAndContentEnum.REJECT_4.getMessage();        //事件驳回了需要通知申请人        setWebsocket(eventId,message,UserTypeEnum.NO_DEFAULT.getCode() );    }    /**     * 审核人对事件进行审核     * @param eventEvaluate 评价     * @param eventProposal 建议措施     * @param eventId 事件id     * @param userID  审核人     * @param eventLevel 事件等级     */    @Transactional    @Override    public void updateForVerifier(String eventEvaluate, String eventProposal, String eventId, String userID, String eventLevel) {        boolean result = getResultByEventIdAndUserId(eventId, userID, UserTypeEnum.VERIFIER.getCode());        if(!result){            throw new ParameterInvalidException("你无权处理该事件");        }        //都通过了，需要把状态改为 待结案 状态        int eventStatus = EventStatusEnum.STATUSENUM_4.getCode();        try{            int write= eventRepository.updateForVerifier(eventEvaluate, eventProposal, eventStatus, eventId, userID, eventLevel,new Date(),new Date());            if(write== 0){                throw new ParameterInvalidException("插入数据失败");            }        }catch (Exception e){            throw new ParameterInvalidException("出现未知错误，请检查传入数据是否有误");        }        //发送websocket提醒        String message = MessageTitleAndContentEnum.HANDLER_3.getMessage();        //事件审核了需要通知申请人        setWebsocket(eventId,message,UserTypeEnum.NO_DEFAULT.getCode() );    }    /**     * 审核人驳回事件     * @param rejectReason 驳回理由     * @param eventId 哪个事件的id     * @param verifierUserId 审核人的id     */    @Transactional    @Override    public void updateRejectForVerifier(String rejectReason, String eventId, String verifierUserId) {        boolean result = getResultByEventIdAndUserId(eventId, verifierUserId, UserTypeEnum.VERIFIER.getCode());        if(!result){            throw new ParameterInvalidException("你无权处理该事件");        }        //都通过了，需要把状态改为 待结案 状态        int eventStatus = EventStatusEnum.STATUSENUM_3.getCode();        try{            int write= eventRepository.updateRejectForVerifier(rejectReason, eventStatus, eventId, verifierUserId,new Date(),new Date());            if(write== 0){                throw new ParameterInvalidException("插入数据失败");            }        }catch (Exception e){            throw new ParameterInvalidException("出现未知错误，请检查传入数据是否有误");        }        //发送websocket提醒        String message = MessageTitleAndContentEnum.REJECT_4.getMessage();        //事件驳回了需要通知申请人        setWebsocket(eventId,message,UserTypeEnum.NO_DEFAULT.getCode() );    }    // ==============================  私有方法开始 =================================    /**     * 将原因节点进行第一级解封     * 返回的格式为，每个最小的集合的前一个是主原因，后一个是子原因     * [[871909c4a0084447be3f615730dbb3d3, 164956dc3bff47cea04b659e7449cea8], [871909c4a0084447be3f615730dbb3d3, d855d157cb794410a763e3acf9163eb6], [ecc7dae14fad4e388d77dd7441348ffc, bc1b7199a5f64f3aa1e87e6adaf18df1], [ecc7dae14fad4e388d77dd7441348ffc, 427ffdd821564a9ba3698fcb618c8164]]     *     * @param eventReasonSonIds     */    private List<List<String>> reasonTree(String eventReasonSonIds) {        List<List<String>> totalResult = new ArrayList<>();        if (eventReasonSonIds.indexOf(",") == -1) {            //只有一个主原因            getReason(eventReasonSonIds, totalResult);        } else {            //有多个主原因            //将多个原因转为数组            String[] reasonIds = eventReasonSonIds.split(",");            for (String s : reasonIds) {                getReason(s, totalResult);            }        }        return totalResult;    }    /**     * 解除封装的原因第二级，每一个主原因加子原因的封装     * 返回的格式如：[     * // [871909c4a0084447be3f615730dbb3d3, 164956dc3bff47cea04b659e7449cea8],     * // [871909c4a0084447be3f615730dbb3d3, d855d157cb794410a763e3acf9163eb6],     * // [ecc7dae14fad4e388d77dd7441348ffc, bc1b7199a5f64f3aa1e87e6adaf18df1],     * // [ecc7dae14fad4e388d77dd7441348ffc, 427ffdd821564a9ba3698fcb618c8164]     * // ]     *     * @param ids 每一个主原因加子原因的封装元素     * @return     */    private List<List<String>> getReason(String ids, List<List<String>> resulrAll) {        if (ids.indexOf("-") != -1) {            String[] treeIds = ids.split("-"); //一个主原因，加多个子原因            //将子原因截取出来            if (treeIds[1].indexOf("+") == -1) {                //只有一个子原因                List<String> resulr = new ArrayList<>();                resulr.add(new String(treeIds[0]));                resulr.add(new String(treeIds[1]));                resulrAll.add(resulr);            } else {                //有多个子原因                String[] sonIds = treeIds[1].split("\\+");                for (String s : sonIds                        ) {                    List<String> resulr = new ArrayList<>();                    resulr.add(new String(treeIds[0]));                    resulr.add(new String(s));                    resulrAll.add(resulr);                }            }        } else {            throw new ParameterInvalidException("请求的数据有误");        }        return resulrAll;    }    /**     * 封装event数据     *     * @param eventDTO     * @param event     * @param eventId     * @param now     */    private void setEvent(EventDTO eventDTO, Event event, String eventId, Date now) {        String eventTypeid = getEventParentByEventTypeName(eventDTO.getEventType()); //获取事件类型的一级分类ID        Integer state=setEventTaskService.isAccess(eventTypeid) ? EventStatusEnum.STATUSENUM_2.getCode() : EventStatusEnum.STATUSENUM_1.getCode(); //获取事件状态码        BeanUtils.copyProperties(eventDTO, event);        event.setEventId(eventId);        event.setCreateTime(now);        event.setUpdateTime(now);        event.setEventStatus(state);//事件状态        event.setEventTypeOneClassId(eventTypeid); //事件类型的一级分类ID        event.setAnonymous(eventDTO.getIsAnonymous().equals("y"));        //System.out.println(event);    }    /**     * 通过子节点类型名字，找出一级分类     *     * @param typeName     * @return     */    private String getEventParentByEventTypeName(String typeName) {        List<EventType> eventTypes = eventTypeRepository.findAll();        String typeId = null;        for (EventType e : eventTypes ) {            if (e.getName().equals(typeName)) {                typeId = e.getEventTypeId();            }        }        if (typeId == null) {            throw new ParameterInvalidException("传入的事件类型名字有误");        }        String id = getEventParentName(eventTypes, typeId);        return id;    }    /**     * 通过子节点类型名字，找出一级分类的递归     *     * @param list     * @param typeID     * @return     */    private String getEventParentName(List<EventType> list, String typeID) {        String eventId = null;        String parent = null;        for (EventType e : list                ) {            if (e.getEventTypeId().equals(typeID)) {                parent = e.getParentId();                if (!parent.equals("0")) {                    eventId= getEventParentName(list, parent);                } else {                    eventId = e.getEventTypeId();                    break;                }            }        }        return eventId;    }    /**     * 通过用户ID查出该用户可以访问哪些一级分类  findAllPage处用     * @param handlerOrVerifier 通过事件状态判断 是要处理人还是审核人：事件处理人员类型 (1:直接处理人员 2:结案人员)     * @param userId     * @return     */    private List<String>  getListByUserId(Integer handlerOrVerifier,String userId){        //通过事件状态判断 是要处理人还是审核人：事件处理人员类型 (1:直接处理人员 2:结案人员)        Integer userType = handlerOrVerifier ==UserTypeEnum.HANDLER.getCode()?1:handlerOrVerifier ==UserTypeEnum.VERIFIER.getCode()? 2:0;        List<String> eventTypes= new ArrayList<>();        // TODO        List<EventTaskUserDTO> listEventTaskUserDTO= setEventTaskService.getEventTaskByUser(userId);        for (EventTaskUserDTO e:listEventTaskUserDTO             ) {            if (e.getUserType() == userType){                eventTypes.add(new String(e.getEventTask().getEventTypeId()));            }        }        //以下为之前模拟数据       /* if( "2734cea0da724c9090030e9759cb892b".equals(userId) && eventStatus ==1){            eventTypes.add(new String("c7515c67798b417989e74f26063d1771"));//医技管理            eventTypes.add(new String("ff7e467490894a839fc6b1b2a2556f92")); //治安管理            eventTypes.add(new String("94468347bd4345569bedb4b949955112"));//机械管理        }        if( "2734cea0da724c9090030e9759cb892b".equals(userId) && eventStatus ==2){            eventTypes.add(new String("c7515c67798b417989e74f26063d1771"));//医技管理            eventTypes.add(new String("ff7e467490894a839fc6b1b2a2556f92")); //治安管理            eventTypes.add(new String("94468347bd4345569bedb4b949955112"));//机械管理        }*/        //结案的集合       /* List<String> eventTypes= new ArrayList<>();        if( "8c4048f72a804722b1e3dcc6cf96c803".equals(userId) && handlerOrVerifier ==4){            eventTypes.add(new String("da8f0182d30f4ea284767133d6a6dc7a"));//医疗管理类            eventTypes.add(new String("697c81d122d641ce98b5a7f4695180f1"));//护理管理类            eventTypes.add(new String("a388d4c151764a9a998e0acf3ca27e1a"));//药品管理类            eventTypes.add(new String("e90797c3673b46bdac5a26a6f75f4bbb"));//信息管理类            eventTypes.add(new String("10e5847abe5849459f525c9eea103e8d"));//后勤管理类            eventTypes.add(new String("af20d11df76645889e1c84dab0afe889"));//职业防护管理类            eventTypes.add(new String("0a84d43d973c4d9a89d77ef1077c05ce"));//院内感染管理类            eventTypes.add(new String("e2b1fa817b50428fa68e0341e1597a58"));//输血管理类            eventTypes.add(new String("94468347bd4345569bedb4b949955112"));//器械管理类            eventTypes.add(new String("ff7e467490894a839fc6b1b2a2556f92"));//治安管理类            eventTypes.add(new String("c7515c67798b417989e74f26063d1771"));//医技管理类        }*/        return eventTypes;    }    /**     * 判断该用户有没有权限处理该事件     * @param eventId  事件id     * @param userId  用户id     * @param handlerOrVerifier 用户类型，1：处理人，2：审核人     * @return  true为可以继续处理，false :没有权限处理     */    private boolean getResultByEventIdAndUserId(String eventId,String userId,int handlerOrVerifier){        //通过事件状态判断 是要处理人还是审核人：事件处理人员类型 (1:直接处理人员 2:结案人员)        Integer userType = handlerOrVerifier ==UserTypeEnum.HANDLER.getCode()?1:handlerOrVerifier ==UserTypeEnum.VERIFIER.getCode()? 2:UserTypeEnum.NO_DEFAULT.getCode();        // TODO        //过eventId找出事件的 一级分类类型        String eventTypeOneClassId =null;        Optional<Event> event= eventRepository.findById(eventId);        if (event.isPresent()){            eventTypeOneClassId =event.get().getEventTypeOneClassId();        }else {            throw new ParameterInvalidException("未能找到事件数据，事件ID有误");        }        // 通过用户查看可以处理的类型        // TODO        List<EventTaskUserDTO> listEventTaskUserDTO= setEventTaskService.getEventTaskByUser(userId);        for (EventTaskUserDTO e:listEventTaskUserDTO                ) {            // 处理人或审核人的身份比对成功后 ，并且 一级分类id也成功            if (e.getUserType() == userType && e.getEventTask().getEventTypeId().equals(eventTypeOneClassId)){                return true;            }        }        return false;    }    /**     * 处理和驳回时发送的消息     * @param eventId     * @param message     * @param handlerOrVerifier 需要通知的人     */    private void setWebsocket(String eventId, String message,int handlerOrVerifier){        List<String> userIds = new ArrayList<>();        //通过事件id 找到申请人  和审核人 （处理人暂时不需要通知）        Optional<Event> event= eventRepository.findById(eventId);        String eventTypeOneClassId =null;        if (event.isPresent()){            //申请人            userIds.add(event.get().getWriteUserId());            eventTypeOneClassId =event.get().getEventTypeOneClassId();        }        //审核人        if (handlerOrVerifier == UserTypeEnum.VERIFIER.getCode() && StringUtils.isNotEmpty(eventTypeOneClassId)){            //通过一级分类id查找出该一级分类有哪些审核人            List<EventTaskUser> list = setEventTaskService.getEventTaskUser(eventTypeOneClassId);            for (EventTaskUser et:list                 ) {                if (et.getUserType() ==2) userIds.add(et.getUserId());            }        }        for (String clientId: userIds             ) {            webSocket.sendOneMessage(clientId, message);        }    }    /**     *参数查询事件     * @param eventSearchDTO     * @param     * @return     * @Author LSQ     */    @Override    public Page<Event> searchByParams(EventSearchDTO eventSearchDTO) {        Specification<Event> specification = new Specification<Event>() {            @Override            public Predicate toPredicate(Root<Event> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                List<Predicate> predis = new ArrayList<>();                // 日期筛选                if(!org.springframework.util.StringUtils.isEmpty(eventSearchDTO.getStartTime()) && !org.springframework.util.StringUtils.isEmpty(eventSearchDTO.getEndTime())){                    Date timeOne = DateUtil.stringToDate(eventSearchDTO.getStartTime(),"yyyy-MM-dd");                    Date timeTwo = DateUtil.getEndDateByStartDate(timeOne);                    Date timeTwo2 = DateUtil.stringToDate(eventSearchDTO.getEndTime(),"yyyy-MM-dd");                    if(!eventSearchDTO.getStartTime().equals(eventSearchDTO.getEndTime())){                        predis.add(criteriaBuilder.greaterThanOrEqualTo(root.get("createTime").as(Date.class), timeOne));                        predis.add(criteriaBuilder.lessThanOrEqualTo(root.get("createTime").as(Date.class), timeTwo));                    }else {                        predis.add(criteriaBuilder.between(root.get("createTime").as(Date.class),timeOne,timeTwo2));                    }                }                //事件类型                if(!StringUtils.isEmpty(eventSearchDTO.getEventType())){                    if(eventSearchDTO.getEventType().indexOf(",") > -1){                        String[] eventTypeArr = eventSearchDTO.getEventType().split(",");                        CriteriaBuilder.In<String> in = criteriaBuilder.in(root.get("eventType"));                        for(int i = 0; i < eventTypeArr.length; i++){                            in.value(eventTypeArr[i]);                        }                        predis.add(in);                    }else {                        predis.add(criteriaBuilder.equal(root.get("eventType").as(String.class),eventSearchDTO.getEventType()));                    }                }                //事件等级                if(!StringUtils.isEmpty(eventSearchDTO.getEventLevel())){                    if(eventSearchDTO.getEventLevel().indexOf(",") > -1){                        String[] eventLevelArr = eventSearchDTO.getEventLevel().split(",");                        CriteriaBuilder.In<String> in = criteriaBuilder.in(root.get("eventLevel"));                        for(int i = 0; i < eventLevelArr.length; i++){                            in.value(eventLevelArr[i]);                        }                        predis.add(in);                    }else {                        predis.add(criteriaBuilder.equal(root.get("eventLevel").as(String.class),eventSearchDTO.getEventLevel()));                    }                }                // 上报科室                if(!StringUtils.isEmpty(eventSearchDTO.getDept())){                    if(eventSearchDTO.getDept().indexOf(",") > -1){                        String[] deptArr = eventSearchDTO.getDept().split(",");                        CriteriaBuilder.In<String> in = criteriaBuilder.in(root.get("writeUserDept"));                        for(int i = 0; i < deptArr.length; i++){                            in.value(deptArr[i]);                        }                        predis.add(in);                    }else {                        predis.add(criteriaBuilder.equal(root.get("writeUserDept").as(String.class),eventSearchDTO.getDept()));                    }                }                // 发生场所                if(!StringUtils.isEmpty(eventSearchDTO.getAddress())){                    if(eventSearchDTO.getAddress().indexOf(",") > -1){                        String[] addressArr = eventSearchDTO.getAddress().split(",");                        CriteriaBuilder.In<String> in = criteriaBuilder.in(root.get("eventAddress"));                        for(int i = 0; i < addressArr.length; i++){                            in.value(addressArr[i]);                        }                        predis.add(in);                    }else {                        predis.add(criteriaBuilder.equal(root.get("eventAddress").as(String.class),eventSearchDTO.getAddress()));                    }                }                // 事件状态                if(!StringUtils.isEmpty(eventSearchDTO.getStatus())){                    predis.add(criteriaBuilder.equal(root.get("eventStatus").as(Integer.class),Integer.valueOf(eventSearchDTO.getStatus())));                }                return criteriaBuilder.and(predis.toArray(new Predicate[predis.size()]));            }        };        Pageable pageable = PageRequest.of(eventSearchDTO.getPageNumber(), eventSearchDTO.getPageSize());        Page<Event> eventPage = eventRepository.findAll(specification, pageable);        return eventPage;    }    /**     * 通过事件ID获取事件的全部信息（暂时在驳回后重新提交时用，或处理时）     * @param eventId     * @return     */    @Override    public Event findByEventId(String eventId) {     Optional<Event> result  = eventRepository.findById(eventId);     Event event = new Event();     if (result.isPresent()){         event= result.get();     }else {         throw new ParameterInvalidException("未查询到数据");     }        return event;    }    /**     * 时间查询事件导出Excel(List)     *     * @return     */    @Override    public List<Event> searchByParamsInExcel(String startTime,String endTime) {        Specification<Event> specification = new Specification<Event>() {            @Override            public Predicate toPredicate(Root<Event> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                List<Predicate> predis = new ArrayList<>();                // 日期筛选                if(!org.springframework.util.StringUtils.isEmpty(startTime) && !org.springframework.util.StringUtils.isEmpty(endTime)){                    Date timeOne = DateUtil.stringToDate(startTime,"yyyy-MM-dd");                    Date timeTwo = DateUtil.getEndDateByStartDate(timeOne);                    Date timeTwo2 = DateUtil.stringToDate(endTime,"yyyy-MM-dd");                    if(!startTime.equals(endTime)){                        predis.add(criteriaBuilder.greaterThanOrEqualTo(root.get("createTime").as(Date.class), timeOne));                        predis.add(criteriaBuilder.lessThanOrEqualTo(root.get("createTime").as(Date.class), timeTwo));                    }else {                        predis.add(criteriaBuilder.between(root.get("createTime").as(Date.class),timeOne,timeTwo2));                    }                }                return criteriaBuilder.and(predis.toArray(new Predicate[predis.size()]));            }        };        List<Event> eventList = eventRepository.findAll(specification);        return eventList;    }    /**     * 模糊查询事件     * @param key     * @param pageable     * @return     */    @Override    public Page<Event> searchByKey(String key,Pageable pageable) {        Specification<Event> specification = new Specification<Event>(){            @Override            public Predicate toPredicate(Root<Event> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {                List<Predicate> predis = new ArrayList<>();                if(!key.isEmpty()){                    Predicate p1 = criteriaBuilder.like(root.get("patientName"),"%"+ key + "%");                    Predicate p2 = criteriaBuilder.like(root.get("patientNumber"),"%"+ key + "%");                    Predicate p3 = criteriaBuilder.like(root.get("patientDept"),"%"+ key + "%");                    Predicate p4 = criteriaBuilder.like(root.get("eventLevel"),"%"+ key + "%");                    Predicate p5 = criteriaBuilder.like(root.get("eventType"),"%"+ key + "%");                    // 组合查询条件                    Predicate p = criteriaBuilder.or(p1,p2,p3,p4,p5);                    predis.add(p);                }                return criteriaBuilder.and(predis.toArray(new Predicate[predis.size()]));            }        };        return eventRepository.findAll(specification,pageable);    }    /**     * 查看event实例     * @param eventId     * @return     * @Author LSQ     */    @Override    public Event getEventById(String eventId) {        Event event = null;        Optional<Event> result = eventRepository.findById(eventId);        if(result.isPresent()){            event = result.get();        }        return event;    }    /**     * 查看事件原因分析图     * @param eventId     * @return     */    @Override    public ReasonChartVO getResonChart(String eventId) {        ReasonChartVO resultVo = null;        Optional<Event> result = eventRepository.findById(eventId);        if(result.isPresent()){            List<EventReason> list = result.get().getEventReasonList();            if(list != null && list.size() > 0){                // 结果封装                resultVo = new ReasonChartVO();                resultVo.setName("事件id");                resultVo.setValue(result.get().getEventId());                List<ReasonChartVO> chiren = new ArrayList<>();                List<EventReason> list1 = new ArrayList<>();                List<EventReason> list2 = new ArrayList<>();                List<EventReason> list3 = new ArrayList<>();                List<EventReason> list4 = new ArrayList<>();                List<EventReason> list5 = new ArrayList<>();                List<EventReason> list6 = new ArrayList<>();                for(EventReason item:list){                    String treeName = item.getEventReasonTreeName();                    if("个人原因".equals(treeName)){                        list1.add(item);                    }else if("设施因素".equals(treeName)){                        list2.add(item);                    }else if("耗材因素".equals(treeName)){                        list3.add(item);                    }else if("制度因素".equals(treeName)){                        list4.add(item);                    }else if("业务流程因素".equals(treeName)){                        list5.add(item);                    }else if("工作关键因素".equals(treeName)){                        list6.add(item);                    }                }                // 个人因素                if(list1.size() > 0){                    ReasonChartVO chartVO = JsonUtil.getReasonChartVOByList(list1);                    chiren.add(chartVO);                }                // 设施因素                if(list2.size() > 0){                    ReasonChartVO chartVO = JsonUtil.getReasonChartVOByList(list2);                    chiren.add(chartVO);                }                // 耗材因素                if(list3.size() > 0){                    ReasonChartVO chartVO = JsonUtil.getReasonChartVOByList(list3);                    chiren.add(chartVO);                }                // 制度因素                if(list4.size() > 0){                    ReasonChartVO chartVO = JsonUtil.getReasonChartVOByList(list4);                    chiren.add(chartVO);                }                // 业务流程因素                if(list5.size() > 0){                    ReasonChartVO chartVO = JsonUtil.getReasonChartVOByList(list5);                    chiren.add(chartVO);                }                // 工作关键因素                if(list6.size() > 0){                    ReasonChartVO chartVO = JsonUtil.getReasonChartVOByList(list6);                    chiren.add(chartVO);                }                resultVo.setChildren(chiren);            }        }        return resultVo;    }    /**     * 导出事件分析报告     * @param request     * @param response     * @param event     */    @Override    public void exportWord(HttpServletRequest request, HttpServletResponse response,Event event) {        Map<String, Object> params = new HashMap<String, Object>();        // 数据封装        params.put("title",event.getEventId());        params.put("name",event.getPatientName());        if(event.getPatientBirthday() != null){            String age = DateUtil.DateToString(event.getPatientBirthday(),"yyyy-MM-dd");            params.put("age",age);        }        params.put("number",event.getPatientNumber());        params.put("sex",event.getPatientSex());        params.put("dapt",event.getPatientDept());        params.put("ward",event.getWriteUserWard());        params.put("eventType",event.getEventType());        params.put("eventLevel",event.getEventLevel() == null?"暂未评定等级":event.getEventLevel());        params.put("eventStatus","已结案");        params.put("eventDesc",event.getEventDesc());        params.put("eventzd",event.getPatientDiagnosis());        params.put("eventcs",event.getEventMeasures());        params.put("eventclpj",event.getEventEvaluateForHandler() == null?"该事件没有处理评价":event.getEventEvaluateForHandler());        params.put("eventcljy",event.getEventProposalForHandler() == null?"该事件没有处理建议":event.getEventProposalForHandler());        params.put("eventjapj",event.getEventEvaluate() == null?"该事件没有结案评价":event.getEventEvaluate());        params.put("eventjajy",event.getEventProposal() == null?"该事件没有结案建议":event.getEventProposal());        // 原因封装        List<EventReason> reasonList = event.getEventReasonList();        List<EventReason> list1 = new ArrayList<>();        List<EventReason> list2 = new ArrayList<>();        List<EventReason> list3 = new ArrayList<>();        List<EventReason> list4 = new ArrayList<>();        List<EventReason> list5 = new ArrayList<>();        List<EventReason> list6 = new ArrayList<>();        if(reasonList != null && reasonList.size() > 0){            for(EventReason item:reasonList){                String treeName = item.getEventReasonTreeName();                if("个人原因".equals(treeName)){                    list1.add(item);                }else if("设施因素".equals(treeName)){                    list2.add(item);                }else if("耗材因素".equals(treeName)){                    list3.add(item);                }else if("制度因素".equals(treeName)){                    list4.add(item);                }else if("业务流程因素".equals(treeName)){                    list5.add(item);                }else if("工作环境因素".equals(treeName)){                    list6.add(item);                }            }        }        if(list1.size() > 0){            String sonName = "";            for(EventReason item:list1){                sonName += item.getEventReasonSonName() + ",";            }            params.put("reason1",sonName);        }else {            params.put("reason1","无个人原因");        }        if(list2.size() > 0){            String sonName = "";            for(EventReason item:list2){                sonName += item.getEventReasonSonName() + ",";            }            params.put("reason2",sonName);        }else {            params.put("reason2","无设施因素");        }        if(list3.size() > 0){            String sonName = "";            for(EventReason item:list3){                sonName += item.getEventReasonSonName() + ",";            }            params.put("reason3",sonName);        }else {            params.put("reason3","无耗材因素");        }        if(list4.size() > 0){            String sonName = "";            for(EventReason item:list4){                sonName += item.getEventReasonSonName() + ",";            }            params.put("reason4",sonName);        }else {            params.put("reason4","无制度因素");        }        if(list5.size() > 0){            String sonName = "";            for(EventReason item:list5){                sonName += item.getEventReasonSonName() + ",";            }            params.put("reason5",sonName);        }else {            params.put("reason5","无业务流程因素");        }        if(list6.size() > 0){            String sonName = "";            for(EventReason item:list6){                sonName += item.getEventReasonSonName() + ",";            }            params.put("reason6",sonName);        }else {            params.put("reason6","无工作环境因素");        }        params.put("eventWrite","匿名");        if(event.getHandlerUserId() != null){            Optional<User> optional = userRepository.findById(event.getHandlerUserId());            if(optional.isPresent()){                params.put("eventHandler",optional.get().getUserName());            }        }else {            params.put("eventHandler","aa");        }        if(event.getVerifierUserId() != null){            Optional<User> optional2 = userRepository.findById(event.getVerifierUserId());            if(optional2.isPresent()){                params.put("eventClose",optional2.get().getUserName());            }        }else {            params.put("eventClose","bb");        }        params.put("eventWriteTime","填写时间");        params.put("eventHandlerTime","处理时间");        params.put("eventCloseTime","结案时间");        String fileName = event.getEventId() + ".docx";        ExportWordUtil.exportWord("word/event.docx", "E:/del", fileName, params, request, response);    }    //-----------------------事件统计部分-------------------------------    /**     * 事件等级统计     * @return     */    @Override    public Map<String,Object> getEchartByEventLevel() {        // 获取事件等级        Sort sort = Sort.by(Sort.Direction.ASC, "createTime");        List<EventLevel> eventLevelList = eventLevelRepository.findAll(sort);        if(eventLevelList != null && eventLevelList.size() > 0){            Map<String,Object> result = new HashMap<>();            for(EventLevel item : eventLevelList){                String eventLevelName = item.getName();                List<Event> list = eventRepository.findByEventLevel(eventLevelName);                if(list != null && list.size() > 0){                    result.put(eventLevelName,list.size());                }else {                    result.put(eventLevelName,0);                }            }            return result;        }        return null;    }    /**     * 事件类型统计     * @return     */    @Override    public List<ChartEventTypeVO> getEchartByEventType() {        List<EventType> eventTypeList = eventTypeRepository.findByParentId("0");        List<ChartEventTypeVO> result = new ArrayList<>();        if(eventTypeList != null && eventTypeList.size() > 0){            for(EventType item:eventTypeList){                ChartEventTypeVO chartEventTypeVO = new ChartEventTypeVO();                String eventTypeName = item.getName();                String eventTypeId = item.getEventTypeId();                List<Event> list = eventRepository.findByEventTypeOneClassId(eventTypeId);                if(list != null && list.size() > 0){                    chartEventTypeVO.setValue(list.size());                    chartEventTypeVO.setName(eventTypeName);                }else {                    chartEventTypeVO.setValue(0);                    chartEventTypeVO.setName(eventTypeName);                }                result.add(chartEventTypeVO);            }        }        return result;    }    /**     * 不同月份事件等级统计     * @return     */    @Override    public List<ChartEventTimeVO> getEchartByEventTime() {        List<ChartEventTimeVO> result = new ArrayList<>();        // 1, 获取今年年份        LocalDate localDate = LocalDate.now();        String year = String.valueOf(localDate.getYear());        // 2，获取事件等级        Sort sort = Sort.by(Sort.Direction.ASC, "createTime");        List<EventLevel> eventLevelList = eventLevelRepository.findAll(sort);        if(eventLevelList != null && eventLevelList.size() > 0){            // 3, 查询不同月份，封装结果            for(EventLevel item:eventLevelList){                ChartEventTimeVO chartEventTimeVO = new ChartEventTimeVO();                String eventLevelName = item.getName();                chartEventTimeVO.setName(eventLevelName);                chartEventTimeVO.setType("line");                chartEventTimeVO.setStack("总量");                // 封装不同事件等级各月份数据量                List<Integer> data = new ArrayList<>();                // 1月                List<Event> one = eventRepository.findByEventLevelAndTime(eventLevelName,year,"01");                if(one != null && one.size() > 0){                    data.add(one.size());                }else {                    data.add(0);                }                // 2月                List<Event> two = eventRepository.findByEventLevelAndTime(eventLevelName,year,"02");                if(two != null && two.size() > 0){                    data.add(two.size());                }else {                    data.add(0);                }                // 3月                List<Event> three = eventRepository.findByEventLevelAndTime(eventLevelName,year,"03");                if(three != null && three.size() > 0){                    data.add(three.size());                }else {                    data.add(0);                }                // 4月                List<Event> four = eventRepository.findByEventLevelAndTime(eventLevelName,year,"04");                if(four != null && four.size() > 0){                    data.add(four.size());                }else {                    data.add(0);                }                // 5月                List<Event> five = eventRepository.findByEventLevelAndTime(eventLevelName,year,"05");                if(five != null && five.size() > 0){                    data.add(five.size());                }else {                    data.add(0);                }                // 6月                List<Event> six = eventRepository.findByEventLevelAndTime(eventLevelName,year,"06");                if(six != null && six.size() > 0){                    data.add(six.size());                }else {                    data.add(0);                }                // 7月                List<Event> seven = eventRepository.findByEventLevelAndTime(eventLevelName,year,"07");                if(seven != null && seven.size() > 0){                    data.add(seven.size());                }else {                    data.add(0);                }                // 8月                List<Event> eight = eventRepository.findByEventLevelAndTime(eventLevelName,year,"08");                if(eight != null && eight.size() > 0){                    data.add(eight.size());                }else {                    data.add(0);                }                // 9月                List<Event> nine = eventRepository.findByEventLevelAndTime(eventLevelName,year,"09");                if(nine != null && nine.size() > 0){                    data.add(nine.size());                }else {                    data.add(0);                }                // 10月                List<Event> ten = eventRepository.findByEventLevelAndTime(eventLevelName,year,"10");                if(ten != null && ten.size() > 0){                    data.add(ten.size());                }else {                    data.add(0);                }                // 11月                List<Event> eleven = eventRepository.findByEventLevelAndTime(eventLevelName,year,"11");                if(eleven != null && eleven.size() > 0){                    data.add(eleven.size());                }else {                    data.add(0);                }                // 12月                List<Event> twelve = eventRepository.findByEventLevelAndTime(eventLevelName,year,"12");                if(twelve != null && twelve.size() > 0){                    data.add(twelve.size());                }else {                    data.add(0);                }                chartEventTimeVO.setData(data);                result.add(chartEventTimeVO);            }        }        return result;    }    /**     * 获取首页标题栏相关统计     * @return     */    @Override    public List<ChartTitleVO> getEchartByTitle() {        LocalDate localDate = LocalDate.now();        String year = String.valueOf(localDate.getYear());        List<ChartTitleVO> result = new ArrayList<>();        Integer one = 0;        Integer two = 0;        Integer three = 0;        Double four = 0.00;        Double five = 0.00;        Double six = 0.00;        one = eventRepository.findByEventCount(year,"01","12");        two = eventRepository.findByEventCountInStatus(EventStatusEnum.STATUSENUM_2.getCode(),year,"01","12");        three = eventRepository.findByEventCountInStatus(EventStatusEnum.STATUSENUM_4.getCode(),year,"01","12");        four = Math.floor(one/1200);        five = Math.floor(one/400);        six = Math.floor(one/100);        ChartTitleVO chartTitleVO1 = new ChartTitleVO("事件总数量", "ios-clipboard-outline", String.valueOf(one), "#2d8cf0");        ChartTitleVO chartTitleVO2 = new ChartTitleVO("事件上报数量", "md-clipboard", String.valueOf(two), "#19be6b");        ChartTitleVO chartTitleVO3 = new ChartTitleVO("事件结案数量", "ios-clipboard", String.valueOf(three), "#ff9900");        ChartTitleVO chartTitleVO4 = new ChartTitleVO("事件年度发生率", "md-trending-up", String.valueOf(four), "#ed3f14");        ChartTitleVO chartTitleVO5 = new ChartTitleVO("事件季度发生率", "md-trending-up", String.valueOf(five), "#E46CBB");        ChartTitleVO chartTitleVO6 = new ChartTitleVO("事件月结发生率", "md-trending-up", String.valueOf(six), "#9A66E4");        result.add(chartTitleVO1);        result.add(chartTitleVO2);        result.add(chartTitleVO3);        result.add(chartTitleVO4);        result.add(chartTitleVO5);        result.add(chartTitleVO6);        return result;    }    /**     * 获取当前用户不同事件状态的事件数量     *     * @param userId     * @return     */    @Override    public Map<String, Object> getByEventCountInUser(String userId) {        Map<String,Object> result = new HashMap<>();        Integer one = 0;        Integer two = 0;        Integer three = 0;        Integer four = 0;        one = eventRepository.findByEventCountInUser(EventStatusEnum.STATUSENUM_1.getCode(),userId);        two = eventRepository.findByEventCountInUser(EventStatusEnum.STATUSENUM_2.getCode(),userId);        three = eventRepository.findByEventCountInUser(EventStatusEnum.STATUSENUM_4.getCode(),userId);        four = one + two + three;        result.put("one",one);// 待处理        result.put("two",two);// 待结案        result.put("three",three);// 已结案        result.put("four",four);//上报事件总数        return result;    }}