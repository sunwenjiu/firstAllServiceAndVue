package com.ame.ser.service.impl;import com.ame.ser.model.Event;import com.ame.ser.model.EventTask;import com.ame.ser.model.EventType;import com.ame.ser.repository.EventRepository;import com.ame.ser.repository.EventTaskRepository;import com.ame.ser.repository.EventTypeRepository;import com.ame.ser.service.EventTypeService;import com.ame.ser.utils.TreeNodeForVueUtile;import org.springframework.stereotype.Service;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.service.ex.TableFieldContentDuplicateException;import com.ame.ser.utils.PrimaryKeyUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Optional;/** * 事件类型业务层实现类 * @author SWJ */@Servicepublic class EventTypeServiceImpl implements EventTypeService {    private static Logger logger = LoggerFactory.getLogger(EventTypeServiceImpl.class);    @Autowired    private EventTypeRepository eventTypeRepository;    @Autowired    private EventTaskRepository eventTaskRepository;    @Autowired    private EventRepository eventRepository;    /**     * 创建事件类型     * @param eventType     * @throws TableFieldContentDuplicateException     */    @Override    @Transactional    public void createEventType(EventType eventType) throws TableFieldContentDuplicateException {        // 判断父ID是否为0或是否能查到数据        if(!eventType.getParentId().equals("0")){            Optional<EventType> eventTypeRepositoryById = eventTypeRepository.findById(eventType.getParentId());            if(!eventTypeRepositoryById.isPresent()  ){                throw new ParameterInvalidException("传入的参数有误，数据不存在");            }        }        EventType result = eventTypeRepository.getByName(eventType.getName());        // logger.info("结果{}",result);        if (result == null) {            String id = PrimaryKeyUtil.getPrimaryId();            eventType.setEventTypeId(id);            Date newTime = new Date();            eventType.setCreateTime(newTime);            eventType.setUpdateTime(newTime);            //保存持久层            eventTypeRepository.saveAndFlush(eventType);            if (eventType.getParentId().equals("0")){                eventTaskRepository.saveAndFlush(new EventTask(eventType));            }        }else {            throw new TableFieldContentDuplicateException("事件类型已经存在了，不能新建");        }    }    /**     * 树-显示全部     * @return     */    @Override    public List<TreeNodeForVueUtile> showTreeData() {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        List<EventType> result= eventTypeRepository.findAll(sort);        List< TreeNodeForVueUtile> tree = new ArrayList<>();        for (EventType e:result) {            tree.add(new TreeNodeForVueUtile(e.getName(), e.getEventTypeId(), e.getParentId(),e.getEventTypeDescribe()));        }        List<TreeNodeForVueUtile> resultTree =  TreeNodeForVueUtile.getTreeResult(tree);        return resultTree;    }    /**     * 分页查询     * @param pageNo     * @param pageSize     * @return     */    @Override    public Page<EventType> findAllPage(int pageNo, int pageSize) {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<EventType> eventTypes = eventTypeRepository.findAll(pageable);        return eventTypes;    }    /**     * 删除（被迭代）     * @param eventTypeId     */    @Override    public void delEventTypeById(String eventTypeId) {        try {            eventTypeRepository.deleteById(eventTypeId);        }catch (EmptyResultDataAccessException e){            throw new ParameterInvalidException("传入的参数有误，数据不存在");        }    }    /**     * 删除（关联子级）     * @param id     */    @Transactional    @Override    public void deleteByEventTypeIdIn(String  id) {        List<EventType> all = eventTypeRepository.findAll();        List<TreeNodeForVueUtile> listDel = new ArrayList<>();        for (EventType e:all) {            listDel.add(new TreeNodeForVueUtile(e.getEventTypeId(),e.getParentId()));        }        List<String> ids= TreeNodeForVueUtile.getChildrenIdByParent(listDel, id);        //System.out.println("删除的集合是："+ids);        //补充开始        //要查看该ID有没有被事件 应用了，如果应用了，则不能删除，如果没应用，就继续完成之前写的删除        for (String s:ids             ) {            Optional<EventType> eventType= eventTypeRepository.findById(s);            if (eventType.isPresent()){                List<Event> listEvent = eventRepository.findByEventType(eventType.get().getName());                if (!listEvent.isEmpty()){                    throw new ParameterInvalidException("该类型或其子类已经被使用，不能删除");                }            }        }      //补充结束        try {            eventTypeRepository.deleteByEventTypeIdIn(ids);        }catch (Exception e){            throw new ParameterInvalidException("传入的参数有误");        }    }    /**     * 修改数据     * @param eventTypeId     * @param name     * @param eventTypeDescribe     */    @Override    public void update(String eventTypeId, String name, String eventTypeDescribe) {        Optional<EventType> byId = eventTypeRepository.findById(eventTypeId);        if (!byId.isPresent()) {            throw new ParameterInvalidException("传入的参数有误");        }        EventType eventType =  byId.get();        if (name.equals(eventType.getName())) {            eventType.setEventTypeDescribe(eventTypeDescribe);            eventType.setUpdateTime(new Date());            eventTypeRepository.saveAndFlush(eventType);            return;        }        EventType result = eventTypeRepository.getByName(name);        if (result !=null) {            throw new TableFieldContentDuplicateException("事件类型存在了，不能创建.");        }        eventType.setName(name);        eventType.setEventTypeDescribe(eventTypeDescribe);        eventType.setUpdateTime(new Date());        eventTypeRepository.saveAndFlush(eventType);    }}