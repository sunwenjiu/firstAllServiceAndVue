package com.ame.ser.service.impl;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.repository.DeptRepository;import com.ame.ser.model.Dept;import com.ame.ser.service.DeptService;import com.ame.ser.service.ex.TableFieldContentDuplicateException;import com.ame.ser.utils.PrimaryKeyUtil;import lombok.extern.slf4j.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.List;import java.util.Optional;/** * 科室/部门的业务层实现类 * * @author SWJ */@Slf4j@Servicepublic class DeptServiceImpl implements DeptService {   // private static Logger logger = LoggerFactory.getLogger(DeptServiceImpl.class);    @Autowired    private DeptRepository deptRepository;    /**     * 创建科室     * @param dept     * @throws TableFieldContentDuplicateException     */    @Override    public void createDept(Dept dept) throws TableFieldContentDuplicateException {        Dept result = deptRepository.getByName(dept.getName());        //log.info("新创建部门是否存在：{}", result);        if (result == null) {            //部门不存在，可以创建            //封装uuid,            String id = PrimaryKeyUtil.getPrimaryId();           // logger.info(id);            dept.setDeptId(id);            //封装创建时间和修改时间            Date newTime = new Date();            dept.setCreateTime(newTime);            dept.setUpdateTime(newTime);            //保存持久层            deptRepository.save(dept);        } else {            //部门存在了，不能创建            log.error("部门存在了，不能创建，部门是：{}", dept.getName());            throw new TableFieldContentDuplicateException("部门存在了，不能创建.");        }    }    /**     * 单个删除部门数据     * @param deptId     */    @Override    public void delDeptById(String deptId) {        try {            deptRepository.deleteById(deptId);        }catch (EmptyResultDataAccessException e){            log.error("单个删除部门时出错，部门ID是：{}", deptId);            throw new ParameterInvalidException("传入的参数有误，数据不存在");        }    }    /**     * 通过id批量删除部门数据     * @param ids     */    @Transactional    @Override    public void deleteByDeptIdIn(List<String > ids) {        try {            deptRepository.deleteByDeptIdIn(ids);        }catch (Exception e){            log.error("批量或多选删除部门时出错，部门IDS是：{}", ids);            throw new ParameterInvalidException("传入的参数有误");        }    }    /**     * 分页查询部门数据     * @param pageNo     * @param pageSize     * @return     */    @Override    public Page<Dept> findAllPage(int pageNo, int pageSize) {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);        Page<Dept> depts = deptRepository.findAll(pageable);        return depts;    }    /**     * 查询全部的部门数据（填报事件页面用到）     * @return     */    @Override    public List<Dept> findAll() {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");        List<Dept> depts = deptRepository.findAll(sort);        return depts;    }    /**     * 通过id更新部门名字和描述     * @param deptId     * @param name     * @param deptDescribe     */    @Override    public void update(String deptId, String name, String deptDescribe) {        Optional<Dept> byId = deptRepository.findById(deptId);        if (!byId.isPresent()) {            log.error("通过id更新部门名字和描述时出错，部门在数据库中不存在，传入的ID是:{}",deptId);           throw new ParameterInvalidException("传入的参数有误");        }        Dept dept =  byId.get();        if (name.equals(dept.getName())) {            dept.setDeptDescribe(deptDescribe);            dept.setUpdateTime(new Date());            deptRepository.saveAndFlush(dept);            return;        }        Dept result = deptRepository.getByName(name);        if (result !=null) {            log.error("通过id更新部门名字和描述时出错，部门存在了，不能重复，传入的name是:{}",name);            throw new TableFieldContentDuplicateException("部门存在了，不能创建.");        }        dept.setName(name);        dept.setDeptDescribe(deptDescribe);        dept.setUpdateTime(new Date());        deptRepository.saveAndFlush(dept);    }}