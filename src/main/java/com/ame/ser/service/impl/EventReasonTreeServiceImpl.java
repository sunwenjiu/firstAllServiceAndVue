package com.ame.ser.service.impl;import com.ame.ser.model.EventReason;import com.ame.ser.model.EventReasonTree;import com.ame.ser.repository.EventReasonRepository;import com.ame.ser.repository.EventReasonTreeRepository;import com.ame.ser.service.EventReasonTreeService;import com.ame.ser.utils.TreeNodeForVueUtile;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.slf4j.Logger;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.service.ex.TableFieldContentDuplicateException;import com.ame.ser.utils.PrimaryKeyUtil;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Optional;/** * 事件原因节点树业务层实现类 * @author SWJ */@Slf4j@Servicepublic class EventReasonTreeServiceImpl implements EventReasonTreeService {   // private static Logger logger = LoggerFactory.getLogger(EventReasonTreeServiceImpl.class);    @Autowired    private EventReasonTreeRepository eventReasonTreeRepository;    @Autowired    private EventReasonRepository eventReasonRepository;    /**     * 创建事件原因节点     * @param eventReasonTree     * @throws TableFieldContentDuplicateException     */    @Override    public void createEventReasonTree(EventReasonTree eventReasonTree) throws TableFieldContentDuplicateException {        // 判断父ID是否为0或是否能查到数据       if(!eventReasonTree.getParentId().equals("0")){           Optional<EventReasonTree> eventReasonTreeRepositoryById = eventReasonTreeRepository.findById(eventReasonTree.getParentId());           if(!eventReasonTreeRepositoryById.isPresent()  ){               log.error("创建事件原因节点失败，ParentId为：{}", eventReasonTree.getParentId());               throw new ParameterInvalidException("传入的参数有误，数据不存在");           }       }        EventReasonTree result = eventReasonTreeRepository.getByName(eventReasonTree.getName());        // logger.info("结果{}",result);        if (result == null) {            String id = PrimaryKeyUtil.getPrimaryId();            eventReasonTree.setEventReasonTreeId(id);            Date newTime = new Date();            eventReasonTree.setCreateTime(newTime);            eventReasonTree.setUpdateTime(newTime);            //保存持久层            eventReasonTreeRepository.saveAndFlush(eventReasonTree);        }else {            log.error("创建事件原因节点失败，name为：{}", eventReasonTree.getName());            throw new TableFieldContentDuplicateException("数据已经存在了，不能新建");        }    }    /**     * 全部展示数据     * @return     */    @Override    public List<TreeNodeForVueUtile> showTreeData() {        Sort sort = Sort.by(Sort.Direction.DESC, "createTime");       List<EventReasonTree> result= eventReasonTreeRepository.findAll(sort);        List< TreeNodeForVueUtile> tree = new ArrayList<>();        for (EventReasonTree e:result             ) {            tree.add(new TreeNodeForVueUtile(e.getName(), e.getEventReasonTreeId(), e.getParentId(),e.getEventReasonTreeDescribe()));        }        List<TreeNodeForVueUtile> resultTree =  TreeNodeForVueUtile.getTreeResult(tree);        return resultTree;    }    /**     * 单个删除（或被迭代）     * @param eventReasonTreeId     */    @Override    public void delEventReasonTreeById(String eventReasonTreeId) {        try {            eventReasonTreeRepository.deleteById(eventReasonTreeId);        }catch (EmptyResultDataAccessException e){            log.error("删除数据失败，传入的参数为：{}", eventReasonTreeId);            throw new ParameterInvalidException("传入的参数有误，数据不存在");        }    }    /**     * 删除（关联子级）     * @param id     */    @Transactional    @Override    public void deleteByEventReasonTreeIdIn(String  id) {        List<EventReasonTree> all = eventReasonTreeRepository.findAll();        List<TreeNodeForVueUtile> listDel = new ArrayList<>();        for (EventReasonTree e:all) {            listDel.add(new TreeNodeForVueUtile(e.getEventReasonTreeId(),e.getParentId()));        }        List<String> ids= TreeNodeForVueUtile.getChildrenIdByParent(listDel, id);        //补充开始        //要查看该ID有没有被事件 应用了，如果应用了，则不能删除，如果没应用，就继续完成之前写的删除        for (String s:ids             ) {            Optional<List<EventReason>> son =  eventReasonRepository.findByEventReasonSonId(s);            Optional<List<EventReason>> tree = eventReasonRepository.findByEventReasonTreeId(s);            if(son.isPresent()  || tree.isPresent()){                //找到了                log.error("删除数据失败,节点被引用了，不能删除，传入的参数为：{}", s);                throw new ParameterInvalidException("该原因或其子原因已经被使用，不能删除");            }        }        //补充结束        try {            eventReasonTreeRepository.deleteByEventReasonTreeIdIn(ids);        }catch (Exception e){            throw new ParameterInvalidException("传入的参数有误");        }    }    /**     * 修改数据     * @param eventReasonTreeId     * @param name     * @param eventReasonTreeDescribe     */    @Override    public void update(String eventReasonTreeId, String name, String eventReasonTreeDescribe) {        Optional<EventReasonTree> byId = eventReasonTreeRepository.findById(eventReasonTreeId);        if (!byId.isPresent()) {            throw new ParameterInvalidException("传入的参数有误");        }        EventReasonTree eventReasonTree =  byId.get();        if (name.equals(eventReasonTree.getName())) {            eventReasonTree.setEventReasonTreeDescribe(eventReasonTreeDescribe);            eventReasonTree.setUpdateTime(new Date());            eventReasonTreeRepository.saveAndFlush(eventReasonTree);            return;        }        EventReasonTree result = eventReasonTreeRepository.getByName(name);        if (result !=null) {            throw new TableFieldContentDuplicateException("事件类型存在了，不能创建.");        }        eventReasonTree.setName(name);        eventReasonTree.setEventReasonTreeDescribe(eventReasonTreeDescribe);        eventReasonTree.setUpdateTime(new Date());        eventReasonTreeRepository.saveAndFlush(eventReasonTree);    }}