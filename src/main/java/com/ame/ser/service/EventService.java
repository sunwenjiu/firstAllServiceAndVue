package com.ame.ser.service;import com.ame.ser.dto.EventDTO;import com.ame.ser.dto.EventSearchDTO;import com.ame.ser.model.Event;import com.ame.ser.vo.*;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.List;import java.util.Map;/** * 事件的业务层 * @author SWJ */public interface EventService {    void createEvent(EventDTO eventDTO);   // Page<Event> findAllPage(Integer eventStatus,String writeUserId,String userId ,Integer requestPage,int pageNo, int pageSize);    /**     * 事件填报页显示的     * @return     */    Page<Event> findAllPageForIn(String userId ,int pageNo, int pageSize);    /**     * 事件处理页显示的     * @return     */    Page<Event> findAllPageForHandler(Integer eventStatus,String userId ,int pageNo, int pageSize);    /**     * 事件审核页显示的     * @param eventStatus     * @param userId     * @param pageNo     * @param pageSize     * @return     */    Page<Event> findAllPageForVerifier(Integer eventStatus,String userId ,int pageNo, int pageSize);    /**     * 通过一级分类ID，查看事件是否有待结案状态，如果有，不能增加处理人（不能改变是否直报状态）     * @param eventTypeOneClassId     * @return 0 可以增加处理人， >0  则不能增加处理人     */    long getCountByEventTypeOneClassIdOnProcessed(String eventTypeOneClassId);    /**     *  处理人填写 处理评价，建议措施     * @param eventEvaluateForHandler 处理评价     * @param eventProposalForHandler 建议措施     * @param eventId 事件id     * @param userID 处理人id     */    void updateForHandler(String eventEvaluateForHandler, String eventProposalForHandler, String eventId,String userID);    /**     * 处理人驳回事件，     * @param rejectReasonForHandler 驳回原因     * @param eventId  哪个事件     * @param handlerUserId 处理人     */    void updateRejectForHandler(String rejectReasonForHandler,  String eventId ,String handlerUserId);    /**     * 审核人 填写评价，建议措施，事件等级     * @param eventEvaluate 评价     * @param eventProposal 建议措施     * @param eventId 事件id     * @param userID  审核人     * @param eventLevel 事件等级     */    void updateForVerifier(String eventEvaluate, String eventProposal, String eventId,String userID,String eventLevel);    /**     * 审核人驳回 填写驳回原因     * @param rejectReason     * @param eventId     * @param verifierUserId     */    void updateRejectForVerifier(String rejectReason,  String eventId ,String verifierUserId);    /**     * 参数查询事件     * @param eventSearchDTO     * @param     * @return     * @Author LSQ     */    Page<Event> searchByParams(EventSearchDTO eventSearchDTO);    /**     * 通过事件ID获取事件的全部信息（暂时在驳回后重新提交时用，或处理时）     * @param eventId     * @return     */    Event findByEventId(String eventId);    /**     *  时间查询事件导出Excel(List)     *     * @return     */    List<Event> searchByParamsInExcel(String startTime,String endTime);    /**     * 模糊查询事件     * @param key     * @param pageable     * @return     */    Page<Event> searchByKey(String key,Pageable pageable);    /**     * 查看event实例     * @param eventId     * @return     * @Author LSQ     */    Event getEventById(String eventId);    /**     * 查看事件原因分析图     * @param eventId     * @return     */    ReasonChartVO getResonChart(String eventId);    /**     * 导出事件分析报告     * @param request     * @param response     * @param event     */    void exportWord(HttpServletRequest request, HttpServletResponse response,Event event);    //-----------------------事件统计部分-------------------------------    /**     * 事件等级统计     * @return     */    Map<String,Object> getEchartByEventLevel();    /**     * 事件类型统计     * @return     */    List<ChartEventTypeVO> getEchartByEventType();    /**     * 不同月份事件等级统计     * @return     */    List<ChartEventTimeVO> getEchartByEventTime();    /**     * 获取首页标题栏相关统计     * @return     */    List<ChartTitleVO> getEchartByTitle();    /**     * 获取当前用户不同事件状态的事件数量     *     * @param userId     * @return     */    Map<String,Object> getByEventCountInUser(String userId);}