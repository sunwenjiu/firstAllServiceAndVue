package com.ame.ser.controller;import cn.afterturn.easypoi.excel.entity.TemplateExportParams;import com.ame.ser.dto.EventDTO;import com.ame.ser.dto.EventSearchDTO;import com.ame.ser.enums.ResultEnum;import com.ame.ser.enums.SexEnum;import com.ame.ser.model.Event;import com.ame.ser.model.User;import com.ame.ser.repository.EventRepository;import com.ame.ser.service.EventService;import com.ame.ser.service.UserService;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.utils.DateUtil;import com.ame.ser.utils.ExportWordUtil;import com.ame.ser.utils.ResultVOUtil;import com.ame.ser.vo.EventExcelVO;import com.ame.ser.vo.ReasonChartVO;import com.ame.ser.vo.ResultVO;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.SecurityUtils;import org.apache.shiro.subject.Subject;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.xml.crypto.Data;import java.text.SimpleDateFormat;import java.util.*;/** * 事件控制器 * @author SWJ */@Slf4j@RestController@RequestMapping("event")public class EventController extends BaseController{    @Autowired    private EventService eventService;    @Autowired    private UserService userService;    @Autowired    private EventRepository eventRepository;    /**     * 创建事件     * @param eventDTO     * @return     */    @RequestMapping("create")    public ResultVO<Void> createEvent(@RequestBody EventDTO eventDTO){        //获取登录用户的id,        String userId =getUserIdBySubject();        System.out.println("userId==============="+userId);        eventDTO.setWriteUserId(userId);        eventService.createEvent(eventDTO);       /* System.out.println("上传的事件数据是"+eventDTO.toString());        SimpleDateFormat sdf  = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss E a");        String now =sdf.format(eventDTO.getPatientBirthday());        System.out.println("现在的时间是"+now);        System.out.println("封装的事件类型："+eventDTO.getEventType());        System.out.println("封装的原因："+eventDTO.getEventReasonSonIds());*/        return new ResultVO<>(SUCCESS );    }    /**     *事件分页查询     * @param eventStatus  事件状态     * @param requestPage 请求的页面是哪页发来的请求  0：事件填报页面 ，1:事件处理页，2：事件审核页     * @param pageNo     * @param pageSize     * @return     */    @RequestMapping("show")    public ResultVO< Page<Event>> showEvent(Integer eventStatus,  Integer requestPage, int pageNo, int pageSize){        //获取登录用户的id,        if(requestPage == null || eventStatus==null ){            log.error("分页查询事件时，请求的数据有误，requestPage或eventStatus为null" );            throw  new ParameterInvalidException("请求的数据有误：数据不能为null");        }        String userId =getUserIdBySubject();        Page<Event> events=null;        if(requestPage == 0){            events= eventService.findAllPageForIn(userId, pageNo, pageSize);        }        if(requestPage == 1){            events= eventService.findAllPageForHandler(eventStatus, userId, pageNo, pageSize);        }        if(requestPage == 2){            events= eventService.findAllPageForVerifier(eventStatus, userId, pageNo, pageSize);        }       // System.out.println(eventStatus);       //  Page<Event> events= eventService.findAllPage(eventStatus,writeUserId,userId, requestPage ,pageNo, pageSize);        return new ResultVO<>(SUCCESS, events);    }    /**     * 处理人处理事件     * @param eventDTO     * @return     */    @RequestMapping("updateForHandler")    public ResultVO<Void> updateForHander(@RequestBody EventDTO eventDTO){        String eventEvaluateForHandler =eventDTO.getEventEvaluateForHandler();        String eventProposalForHandler =eventDTO.getEventProposalForHandler();        String eventId =eventDTO.getEventId();        if(StringUtils.isEmpty(eventEvaluateForHandler)|| StringUtils.isEmpty(eventProposalForHandler)|| StringUtils.isEmpty(eventId)){            log.error("处理人处理事件时，传入的数据为空");            throw  new ParameterInvalidException("传入的参数有误");        }        //获取登录用户的id,        String userId =getUserIdBySubject();        eventService.updateForHandler(eventEvaluateForHandler, eventProposalForHandler, eventId, userId);        return new ResultVO<>(SUCCESS);    }    /**     * 处理人驳回事件     * @param eventDTO     * @return     */    @RequestMapping("updateRejectForHandler")    public ResultVO<Void> updateRejectForHandler(@RequestBody EventDTO eventDTO){        String rejectReasonForHandler =eventDTO.getRejectReasonForHandler();        String eventId =eventDTO.getEventId();        if(StringUtils.isEmpty(rejectReasonForHandler) || StringUtils.isEmpty(eventId)){            log.error("处理人驳回事件时，传入的数据为空");            throw  new ParameterInvalidException("传入的参数有误");        }        //获取登录用户的id,        String userId =getUserIdBySubject();        eventService.updateRejectForHandler(rejectReasonForHandler, eventId, userId);        return new ResultVO<>(SUCCESS);    }    /**     * 审核人审核事件     * @param eventDTO     * @return     */    @RequestMapping("updateForVerifier")    public ResultVO<Void> updateForVerifier(@RequestBody EventDTO eventDTO){        String eventEvaluate =eventDTO.getEventEvaluate();        String eventProposal =eventDTO.getEventProposal();        String eventId =eventDTO.getEventId();        String eventLevel = eventDTO.getEventLevel();        if(StringUtils.isEmpty(eventLevel)||StringUtils.isEmpty(eventEvaluate)|| StringUtils.isEmpty(eventProposal)|| StringUtils.isEmpty(eventId)){            log.error("审核人审核事件时，传入的数据为空");            throw  new ParameterInvalidException("传入的参数有误");        }        //获取登录用户的id,        String userId =getUserIdBySubject();        eventService.updateForVerifier(eventEvaluate, eventProposal, eventId, userId, eventLevel);        return new ResultVO<>(SUCCESS);    }    /**     * 审核人驳回事件     * @param eventDTO     * @return     */    @RequestMapping("updateRejectForVerifier")    public ResultVO<Void> updateRejectForVerifier(@RequestBody EventDTO eventDTO){        String rejectReason =eventDTO.getRejectReason();        String eventId =eventDTO.getEventId();        if(StringUtils.isEmpty(rejectReason) || StringUtils.isEmpty(eventId)){            log.error("审核人驳回事件时，传入的数据为空");            throw  new ParameterInvalidException("传入的参数有误");        }        //获取登录用户的id,        String userId =getUserIdBySubject();        eventService.updateRejectForVerifier(rejectReason, eventId, userId);        return new ResultVO<>(SUCCESS);    }    /**     * 参数查询事件     * @param eventSearchDTO     * @return     * @Author LSQ     */    @RequestMapping("/searchByParams")    public ResultVO searchByParams(@RequestBody EventSearchDTO eventSearchDTO){        Page<Event> pageList = eventService.searchByParams(eventSearchDTO);        if(pageList != null && pageList.getTotalPages() > 0){            return ResultVOUtil.success(pageList);        }        return ResultVOUtil.error(ResultEnum.DATA_ERROR.getCode(),ResultEnum.DATA_ERROR.getMessage());    }@RequestMapping("/init")    public ResultVO eventInit(String eventId){       Event event= eventService.findByEventId(eventId);        return new ResultVO(SUCCESS,event);}    /**     * 模糊查询事件     * @param key     * @param pagfeNumber     * @param pageSize     * @return     */    @RequestMapping("/searchByKey")    public ResultVO searchByKey(@RequestParam("key") String key,                                @RequestParam(value = "pageNumber",defaultValue = "0") Integer pagfeNumber,                                @RequestParam(value = "pageSize",defaultValue = "10") Integer pageSize){        Pageable pageable = PageRequest.of(pagfeNumber, pageSize);        Page<Event> pageList = eventService.searchByKey(key,pageable);        if(pageList != null && pageList.getTotalPages() > 0){            return ResultVOUtil.success(pageList);        }        return ResultVOUtil.error(ResultEnum.DATA_ERROR.getCode(),ResultEnum.DATA_ERROR.getMessage());    }    /**     * 查看event实例     * @param eventId     * @return     * @Author LSQ     */    @RequestMapping("/getEventById")    public ResultVO getEventById(@RequestParam("eventId") String eventId){        Event event = eventService.getEventById(eventId);        if(event != null){            return ResultVOUtil.success(event);        }        return ResultVOUtil.error(ResultEnum.DATA_ERROR.getCode(),ResultEnum.DATA_ERROR.getMessage());    }    /**     * 查看事件原因分析图     * @param eventId     * @return     */    @RequestMapping("/getResonChart")    public ResultVO getResonChart(@RequestParam("eventId") String eventId){        ReasonChartVO chartVO = eventService.getResonChart(eventId);        if(chartVO != null){            return ResultVOUtil.success(chartVO);        }        return ResultVOUtil.error(ResultEnum.DATA_ERROR.getCode(),ResultEnum.DATA_ERROR.getMessage());    }    /**     * 导出事件分析报告(word)     * @param request     * @param response     * @param eventId     */    @RequestMapping("/exportWord")    public void exportWord(HttpServletRequest request, HttpServletResponse response,@RequestParam("eventId") String eventId){        Event event = eventService.getEventById(eventId);        if(event != null){            eventService.exportWord(request,response,event);        }    }    /**     * 导出Excel列表     * @param response     * @param     */    @RequestMapping("/exportExcel")    public void exportExcel(HttpServletResponse response,                            @RequestParam(value = "startTime",defaultValue = "") String startTime,                            @RequestParam(value = "endTime",defaultValue = "") String endTime){        List<Event> list = eventService.searchByParamsInExcel(startTime,endTime);        if(list != null && list.size() > 0){            Date date1 = new Date();            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm");            String date = df.format(date1);            List<EventExcelVO> resultList = new ArrayList<>();            for(Event item:list){                // 数据封装                EventExcelVO excelVO = new EventExcelVO();                BeanUtils.copyProperties(item,excelVO);                excelVO.setPatientSex("男");                excelVO.setEventLevel("一级");                Date patBir = item.getPatientBirthday();                if(patBir != null){                    String patBirStr = DateUtil.DateToString(patBir,"yyyy-MM-dd HH:mm");                    excelVO.setPatientBirthday(patBirStr);                }else {                    excelVO.setPatientBirthday("没有出生日期");                }                Date writeTime = item.getCreateTime();                if(writeTime != null){                    String writeTimeStr = DateUtil.DateToString(writeTime,"yyyy-MM-dd HH:mm");                    excelVO.setCreatTimeStr(writeTimeStr);                }else {                    excelVO.setCreatTimeStr("没有上报日期");                }                // 处理人员                String handleUserId =  item.getHandlerUserId();                if(handleUserId != null){                    User user = userService.findOne(handleUserId);                    if(user != null){                        excelVO.setHandlerUserName(user.getUserName());                    }else {                        excelVO.setHandlerUserName("该事件无处理人员");                    }                }else {                    excelVO.setHandlerUserName("该事件无处理人员");                }                // 结案人员                String verUserId =  item.getVerifierUserId();                if(verUserId != null){                    User user = userService.findOne(verUserId);                    if(user != null){                        excelVO.setVerifierUserName(user.getUserName());                    }else {                        excelVO.setVerifierUserName("该事件无结案人员");                    }                }else {                    excelVO.setVerifierUserName("该事件无结案人员");                }                resultList.add(excelVO);            }           // 导出Excel            TemplateExportParams params = new TemplateExportParams("excel/eventExcel.xls", true);            Map<String, Object> data = new HashMap<String, Object>();            String eventTimeBetween = "";            if(!startTime.isEmpty() && !endTime.isEmpty()){                eventTimeBetween = startTime + "~" + endTime;            }else {                eventTimeBetween = "无时间条件";            }            data.put("eventTimeBetween",eventTimeBetween);            data.put("date", date);            data.put("list", resultList);            ExportWordUtil.exportExcel(response,params,data,"事件导出列表");        }    }}