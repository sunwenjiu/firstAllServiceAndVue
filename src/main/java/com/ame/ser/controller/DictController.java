package com.ame.ser.controller;import com.ame.ser.enums.DictTypeEnum;import com.ame.ser.model.Dict;import com.ame.ser.service.DictService;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.vo.ResultVO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import java.util.List;/** * 字典库控制器 * @author SWJ */@Slf4j@RestController@RequestMapping("dict")public class DictController extends BaseController {    @Autowired    private DictService dictService;    /**     * 创建字典库     * @param dict     * @return     */    @RequestMapping("create")    public ResultVO<Void> createDict(@RequestBody Dict dict){        if (dict.getName()==null || dict.getName().isEmpty()) {            log.error("创建字典库时，传入的名字是空的");            throw new ParameterInvalidException("传入的参数是非法的");        }        dictService.createDict(dict);        return new ResultVO<>(SUCCESS);    }    /**     *     * 分页查询     * @param pageNo     * @param pageSize     * @return     */    @RequestMapping("show")    public ResultVO<Page<Dict>> showAllDictOnPage(int pageNo, int pageSize){        Page<Dict> PageDict =  dictService.findAllPage(pageNo, pageSize);        return new ResultVO<>(SUCCESS,PageDict);    }    /**     * 部分页查询全部     * @return     */    @RequestMapping("showAll")    public ResultVO<List<Dict>> showAllDict(){        List<Dict> PageDict =  dictService.findAll();        return new ResultVO<>(SUCCESS,PageDict);    }    /**     * 单个删除（或被迭代）     * @param id     * @return     */    @RequestMapping("/del/{id}")    public ResultVO<Void> del(@PathVariable("id") String id ){        dictService.delDictById(id);        return new ResultVO<>(SUCCESS);    }    /**     * 通过ID多选删除     * @param ids     * @return     */    @RequestMapping("delAll")    public ResultVO<Void> deleteByDictIdIn(  String ids){        List<String> LString = regDelAllData(ids);        dictService.deleteByDictIdIn(LString);        return new ResultVO<>(SUCCESS);    }    /**     * 修改数据     * @param dict     * @return     */    @RequestMapping("update")    public ResultVO<Void> update(@RequestBody Dict dict){        if (dict.getName()==null || !(dict.getDictType() instanceof DictTypeEnum)) {            log.error("修改字典库时，名字是空的" );            throw new ParameterInvalidException("传入的参数有误");        }        dictService.update(dict.getDictId() , dict.getName(), dict.getDictDescribe(),dict.getDictType());        return new ResultVO<>(SUCCESS);    }}