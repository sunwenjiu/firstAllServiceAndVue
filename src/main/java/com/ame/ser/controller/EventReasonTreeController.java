package com.ame.ser.controller;import com.ame.ser.model.EventReasonTree;import com.ame.ser.service.EventReasonTreeService;import com.ame.ser.utils.TreeNodeForVueUtile;import lombok.extern.slf4j.Slf4j;import org.springframework.data.domain.Page;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import com.ame.ser.service.ex.ParameterInvalidException;import com.ame.ser.vo.ResultVO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;/** * 事件原因节点树控制器 * @author SWJ */@Slf4j@RestController@RequestMapping("eventReasonTree")public class EventReasonTreeController extends BaseController{    @Autowired    private EventReasonTreeService eventReasonTreeService;    /**     * 创建事件原因节点     * @param eventReasonTree     * @return     */    @RequestMapping("create")    public ResultVO<Void> createEventReasonTree(@RequestBody EventReasonTree eventReasonTree){        if (eventReasonTree.getName()==null || eventReasonTree.getParentId() == null) {            log.error("创建事件原因节点树时，传入的名字或父类ID为空");            throw new ParameterInvalidException("传入的参数是非法的，参考为:名字是空的");        }        eventReasonTreeService.createEventReasonTree(eventReasonTree);        return new ResultVO<>(SUCCESS);    }    /**     * 显示事件原因节点     * @return     */    @RequestMapping("show")    public ResultVO<List<TreeNodeForVueUtile>> showAllEventReasonTreeOnPage(){        List<TreeNodeForVueUtile> resule= eventReasonTreeService.showTreeData();       return new ResultVO<>(SUCCESS, resule);    }  /*  @RequestMapping("/del/{id}")    public ResultVO<Void> del(@PathVariable("id") String id ){        eventReasonTreeService.delEventReasonTreeById(id);        return new ResultVO<>(SUCCESS);    }*/    /**     * 通过ID删除（关联删除子级）     * @param id     * @return     */    @RequestMapping("delAll")    public ResultVO<Void> deleteByEventReasonTreeIdIn(  String id){        if (id==null || id.length()<32){            log.error("删除事件原因树时，传入的ID为空，或ID不正确，ID是：{}",id);            throw  new ParameterInvalidException("传入的参数有误");        }        eventReasonTreeService.deleteByEventReasonTreeIdIn(id);        return new ResultVO<>(SUCCESS);    }    /**     * 修改事件等级     * @param eventReasonTree     * @return     */    @RequestMapping("update")    public ResultVO<Void> update(@RequestBody EventReasonTree eventReasonTree){        if (eventReasonTree.getName()==null) {            log.error("修改事件原因节点树时，传入的名字为空");            throw new ParameterInvalidException("传入的参数有误");        }        eventReasonTreeService.update(eventReasonTree.getEventReasonTreeId() , eventReasonTree.getName(), eventReasonTree.getEventReasonTreeDescribe());        return new ResultVO<>(SUCCESS);    }}