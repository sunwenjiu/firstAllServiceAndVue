package com.ame.ser.controller;import com.ame.ser.dto.MessageDTO;import com.ame.ser.enums.ResultEnum;import com.ame.ser.model.Message;import com.ame.ser.service.MessageService;import com.ame.ser.utils.ResultVOUtil;import com.ame.ser.vo.ResultVO;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.List;import java.util.Map;/** * 消息中心的控制器 * @athor SWJ * @Date 2019/8/21 */@Slf4j@RestController@RequestMapping("message")public class MessageController extends BaseController {    @Autowired    private MessageService messageService;    /**     * 初始化登录用户的消息中心     * @return     */    @RequestMapping("init")    public ResultVO getMessage(){        String userId=getUserIdBySubject();        Map<String, List> listMap =  messageService.getMessageList(userId);        return new ResultVO(0, listMap);    }    /**     * 通过消息ID返回该消息的内容     * @param id     * @return     */    @RequestMapping("content")    public ResultVO getMessageContentById(String id){        String content =  messageService.getMessageContentById(id);        ResultVO resultVO = new ResultVO();        resultVO.setCode(0);        resultVO.setData(content);        return resultVO;    }    /**     * 标记已读     * @param messageDTO     * @return     */    @RequestMapping("has_read")    public ResultVO messageHasRead(@RequestBody MessageDTO messageDTO){        messageService.messageHasRead(messageDTO.getMsgId());        return  new ResultVO(SUCCESS);    }    /**     * 统计未读     * @return     */    @RequestMapping("count")    public ResultVO messageUnreadCount(){     long count=   messageService.messageUnreadCount( getUserIdBySubject());        return  new ResultVO(SUCCESS,count);    }    /**     * 创建一个公告消息（通知）     * @return     */    @RequestMapping("create")    public ResultVO createMessageForProclamation(@RequestBody MessageDTO messageDTO){       // System.out.println("================"+messageDTO);        String initiatorId= getUserIdBySubject();        messageService.createMessage(null, initiatorId, messageDTO.getTitle(), messageDTO.getMessageContent());        return  new ResultVO(SUCCESS);    }    /**     * 分页查询     * @param pageNo     * @param pageSize     * @return     */    @RequestMapping("show")    public ResultVO showAllDeptOnPage(int pageNo, int pageSize){        Page<Message> messages = messageService.findAllPage(pageNo, pageSize);        return new ResultVO(SUCCESS,messages);    }    /**     * 通过ids批量删除     * @param ids     * @return     */    @RequestMapping("delAll")    public ResultVO<Void> deleteByDeptIdIn(  String ids){        List<String> LString = regDelAllData(ids);        messageService.deleteByMsgIdIn(LString);        return new ResultVO<>(SUCCESS);    }    /**     * 获取不同消息类型，不同条数的消息     * @param messageType     * @param limit     * @return     */    @RequestMapping("/getListByType")    public ResultVO getListByType(@RequestParam("messageType") Integer messageType,                                  @RequestParam(value = "receiveId",defaultValue = "") String receiveId,                                  @RequestParam("limit") Integer limit){        List<Message> list = messageService.getListByType(messageType,receiveId,limit);        if(list != null && list.size() > 0){            return ResultVOUtil.success(list);        }        return ResultVOUtil.error(ResultEnum.DATA_ERROR.getCode(),ResultEnum.DATA_ERROR.getMessage());    }}