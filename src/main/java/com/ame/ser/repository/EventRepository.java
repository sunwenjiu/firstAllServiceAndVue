package com.ame.ser.repository;import com.ame.ser.model.Event;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;import org.springframework.data.jpa.repository.Modifying;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import java.util.Date;import java.util.List;/** * 事件的持久层 * @author SWJ */public interface EventRepository extends JpaRepository<Event,String> ,JpaSpecificationExecutor<Event> {    /**     * 处理人在对事件处理时的事件处理评价和建议措施     * @param eventEvaluateForHandler     * @param eventProposalForHandler     * @param eventStatus     * @param eventId     * @param handlerUserId     */    @Modifying    @Query("UPDATE Event e SET e.eventEvaluateForHandler = :eventEvaluateForHandler , e.eventProposalForHandler = :eventProposalForHandler,e.eventStatus = :eventStatus , e.handlerUserId = :handlerUserId ,e.handlerUpdateTime = :handlerUpdateTime,e.updateTime =:updateTime WHERE e.id= :eventId")    int updateForHandler(@Param("eventEvaluateForHandler") String eventEvaluateForHandler,@Param("eventProposalForHandler") String eventProposalForHandler,@Param("eventStatus") int eventStatus, @Param("eventId") String eventId,@Param("handlerUserId") String handlerUserId,@Param("updateTime") Date updateTime,@Param("handlerUpdateTime") Date handlerUpdateTime);    /**     * 处理人在对事件处理时的事件驳回理由     * @return     */    @Modifying    @Query("UPDATE Event e SET e.rejectReasonForHandler= :rejectReasonForHandler,  e.eventStatus = :eventStatus ,e.handlerUserId = :handlerUserId ,e.updateTime =:updateTime,e.handlerUpdateTime = :handlerUpdateTime  WHERE e.id = :eventId ")    int updateRejectForHandler(@Param("rejectReasonForHandler") String rejectReasonForHandler,@Param("eventStatus") int eventStatus, @Param("eventId") String eventId,@Param("handlerUserId") String handlerUserId,@Param("updateTime") Date updateTime,@Param("handlerUpdateTime") Date handlerUpdateTime);    /**     * 审核人 审核填写评价，建议措施等     * @param eventEvaluate     * @param eventProposalForHandler     * @param eventStatus     * @param eventId     * @param verifierUserId     * @param eventLevel     * @return     */    @Modifying    @Query("UPDATE Event e SET e.eventEvaluate = :eventEvaluate , e.eventProposal = :eventProposal,e.eventStatus = :eventStatus , e.verifierUserId = :verifierUserId  , e.eventLevel = :eventLevel,e.verifierUpdateTime = :verifierUpdateTime ,e.updateTime =:updateTime  WHERE e.id= :eventId")    int updateForVerifier(@Param("eventEvaluate") String eventEvaluate,@Param("eventProposal") String eventProposalForHandler,@Param("eventStatus") int eventStatus, @Param("eventId") String eventId,@Param("verifierUserId") String verifierUserId ,@Param("eventLevel") String eventLevel,@Param("updateTime") Date updateTime,@Param("verifierUpdateTime") Date verifierUpdateTime);    /**     * 审核人驳回     * @param rejectReason     * @param eventStatus     * @param eventId     * @param verifierUserId     * @return     */    @Modifying    @Query("UPDATE Event e SET e.rejectReason= :rejectReason,  e.eventStatus = :eventStatus ,e.verifierUserId = :verifierUserId ,e.updateTime =:updateTime,e.verifierUpdateTime = :verifierUpdateTime  WHERE e.id = :eventId ")    int updateRejectForVerifier(@Param("rejectReason") String rejectReason,@Param("eventStatus") int eventStatus, @Param("eventId") String eventId,@Param("verifierUserId") String verifierUserId,@Param("updateTime") Date updateTime,@Param("verifierUpdateTime") Date verifierUpdateTime);    /**     * 通过事件类型查看是否有事件（给事件类型删除时用，如果查到了事件，则不能删除，没有查到就可以删除）     * @return     */    List<Event> findByEventType(String eventType);    /**     * 通过事件等级查询Event List     * @param eventLevel     * @return     */    List<Event> findByEventLevel(String eventLevel);    /**     * 通过事件等级一级分类Id查询Event List     * @param eventTypeOneClassId     * @return     */    List<Event> findByEventTypeOneClassId(String eventTypeOneClassId);    /**     * 通过事件等级和时间年月查询list     * @param eventLevel     * @param year     * @param month     * @return     */    @Query(value = "SELECT * FROM `event` WHERE event_level = ?1 AND YEAR(create_time) = ?2 AND MONTH(create_time) = ?3",nativeQuery = true)    List<Event> findByEventLevelAndTime(String eventLevel,String year,String month);    /**     * 查询不同状态  ，不同时间月份区间的事件数量     * @param status     * @param year     * @param startMonth     * @param endMonth     * @return     */    @Query(value = "SELECT COUNT(1) FROM `event` WHERE event_status = ?1 AND YEAR(create_time) = ?2 AND MONTH(create_time) >= ?3 AND MONTH(create_time) <= ?4",nativeQuery = true)    int findByEventCountInStatus(int status,String year,String startMonth,String endMonth);    /**     * 查询不同状态的事件数量     * @param year     * @param startMonth     * @param endMonth     * @return     */    @Query(value = "SELECT COUNT(1) FROM `event` WHERE YEAR(create_time) = ?1 AND MONTH(create_time) >= ?2 AND MONTH(create_time) <= ?3",nativeQuery = true)    int findByEventCount(String year,String startMonth,String endMonth);    /**     * 获取userId 不同状态事件的数量     * @param status     * @param userId     * @return     */    @Query(value = "SELECT COUNT(1) FROM `event` WHERE event_status = ?1 AND write_user_id = ?2",nativeQuery = true)    int findByEventCountInUser(int status,String userId);}