package com.ame.ser.model;import com.ame.ser.enums.SexEnum;import com.fasterxml.jackson.annotation.JsonFormat;import lombok.Data;import lombok.ToString;import javax.persistence.*;import java.util.Date;import java.util.List;/** * 事件实体类表 * @author SWJ */@Entity@Table(name = "event")@Data//@ToString(exclude={"eventReasonList"})public class Event {    /**     * 主ID     */    @Id    @Column(length = 32)    private String eventId;    /**     * 患者姓名     */    @Column(length = 10)    private String patientName;    /**     * 患者工号     */    @Column(length = 32)    private String patientNumber;    /**     * 患者生日     */    @Temporal(TemporalType.TIMESTAMP)    private Date patientBirthday;    /**     * 患者性别，枚举（0：男: MAN，1：女: WOMAN）     */    @Column(nullable = false,length = 5)    private SexEnum patientSex;    /**     * 患者科室/部门     */    @Column(length = 32)    private String patientDept;    /**     * 患者临床诊断     */    @Column(columnDefinition="TEXT")    private String patientDiagnosis;    /**     * 事件描述     */    @Column(columnDefinition="TEXT")    private String eventDesc;    /**     * 事件发生场所     */    @Column(length = 32)    private String eventAddress;    /**     * 事件类型     */    @Column(length = 32)    private String eventType;    /**     * 事件类型一级分类ID     */    @Column(length = 32)    private String eventTypeOneClassId;    /**     * 采取措施     */    @Column(columnDefinition="TEXT")    private String eventMeasures;    /**     * 事件处理情况     */    @Column(columnDefinition="TEXT")    private String eventProcessing;    /**     * 事件状态(0:进行中，1：待处理，2：待结案，3：已驳回，4：已结案)     */    @Column(length = 5)    private int eventStatus;    /**     * 事件等级     */    @Column(length = 32)    private String eventLevel;    /**     * 事件评价 -审核人/结案人用（事件结案评价）     */    @Column(columnDefinition="TEXT")    private String eventEvaluate;    /**     * 建议措施 -审核人/结案人用（事件结案建议措施）     */    @Column(columnDefinition="TEXT")    private String eventProposal;    /**     * 驳回理由 -审核人用     */    @Column(columnDefinition="TEXT")    private String rejectReason;    /**     * 事件评价 -处理人用（事件处理评价）     */    @Column(columnDefinition="TEXT")    private String eventEvaluateForHandler;    /**     * 建议措施 -处理人用 （事件处理建议措施）     */    @Column(columnDefinition="TEXT")    private String eventProposalForHandler;    /**     * 驳回理由 -处理人用     */    @Column(columnDefinition="TEXT")    private String rejectReasonForHandler;    /**     * 处理人Id     */    @Column(length = 32)    private String handlerUserId;    /**     * 审核人Id     */    @Column(length = 32)    private String verifierUserId;    /**     * 填报人Id     */    @Column(length = 32)    private String writeUserId;    /**     * 填报人姓名     */    @Column(length = 32)    private String writeUserName;    /**     * 填报人类型     */    @Column(length = 32)    private String writeUserType;    /**     * 填报人部门     */    @Column(length = 32)    private String writeUserDept;    /**     * 填报人病区     */    @Column(length = 32)    private String writeUserWard;    /**     * 是否匿名  （1 y :是，0 n: 否）     */    @Column(length = 5)    private boolean isAnonymous;    @OneToMany(mappedBy = "eventId",cascade=CascadeType.ALL,fetch=FetchType.EAGER)    //级联保存、更新、删除、刷新;延迟加载。当删除用户，会级联删除该事件的所有事件原因    //mappedBy="eventId"中的eventId是EventReason中的eventId属性    private List<EventReason> eventReasonList;//事件原因    @Temporal(TemporalType.TIMESTAMP)    @JsonFormat(pattern = "yyyy-MM-dd",timezone = "GMT+8")    private Date createTime;    @Temporal(TemporalType.TIMESTAMP)    @JsonFormat(pattern = "yyyy-MM-dd",timezone = "GMT+8")    private Date updateTime;    /**     * 审核人操作时记录时间     */    @Temporal(TemporalType.TIMESTAMP)    private Date verifierUpdateTime;    /**     * 处理人操作时记录时间     */    @Temporal(TemporalType.TIMESTAMP)    private Date handlerUpdateTime;}