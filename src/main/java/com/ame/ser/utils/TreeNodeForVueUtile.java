package com.ame.ser.utils;import lombok.Data;import java.util.ArrayList;import java.util.List;/** * 树节点工具类 * * @author SWJ */@Datapublic class TreeNodeForVueUtile {    private String title;    private String id;    private String parentId;    private String desc;    private List<TreeNodeForVueUtile> children;    public TreeNodeForVueUtile() {    }    //删除数据时使用    public TreeNodeForVueUtile(String id, String parentId) {        this.id = id;        this.parentId = parentId;    }    //查询数据时使用    public TreeNodeForVueUtile(String title, String id, String parentId, String desc) {        this.title = title;        this.id = id;        this.parentId = parentId;        this.desc = desc;    }    /**     * 功能一 查询得到树     * 递归（先得到父节点）再递归     *     * @param list     * @return     */    public static List<TreeNodeForVueUtile> getTreeResult(List<TreeNodeForVueUtile> list) {        List<TreeNodeForVueUtile> listResult = new ArrayList<>();        for (TreeNodeForVueUtile t : list) {            if (t.getParentId().equals("0")) {                listResult.add(t);// 得到父类            }        }        secondTree(list, listResult);        return listResult;    }    /**     * 父节点获取子节点     *     * @param list     * @param listResult     * @return     */    public static void secondTree(List<TreeNodeForVueUtile> list, List<TreeNodeForVueUtile> listResult) {        for (TreeNodeForVueUtile tResult : listResult) {            List<TreeNodeForVueUtile> childrens = new ArrayList<>();            for (TreeNodeForVueUtile t : list) {                if (t.getParentId().equals("0")) {                    continue;                }                if (tResult.getId().equals(t.getParentId())) {                    childrens.add(t);                }            }            tResult.setChildren(childrens);            if (!tResult.getChildren().isEmpty()) {                secondTree(list, tResult.getChildren());            }        }    }    //使用非法参考  /*  List< TreeNodeForVueUtile> tree = new ArrayList<>();        for (EventType e:list //原来的数据进行转换，list是原来的数据                ) {        String title =e.getName();        String id = e.getEventTypeId();        String parentId =e.getParentId();        tree.add(new TreeNodeForVueUtile(title, id, parentId));    }    List<TreeNodeForVueUtile> result =  TreeNodeForVueUtile.getTreeResult(tree);     //递归得到的结果    */    /**     * 功能二 删除父节点时，遍历得到子节点     *     * @param list     * @param id     * @return     */    public static List<String> getChildrenIdByParent(List<TreeNodeForVueUtile> list, String id) {        List<String> listResult = new ArrayList<>();        getChildrenIdList(list, id, listResult);        return listResult;    }    public static void getChildrenIdList(List<TreeNodeForVueUtile> list, String id, List<String> listResult) {        listResult.add(new String(id));        for (TreeNodeForVueUtile t : list                ) {            if (t.getParentId().equals(id)) {                //listResult.add(new String(t.getId()));                getChildrenIdList(list, t.getId(),listResult);            }        }    }    /*    使用方法    1：Repository类    @Modifying    @Transactional    @Query(value="delete from EventType e where e.id in (:ids) ")    int deleteByEventTypeIdIn(@Param("ids")List<String> ids);   :2：serviceimpl    public void deleteByEventTypeIdIn(String  id) {        List<EventType> all = eventTypeRepository.findAll();        List<TreeNodeForVueUtile> listDel = new ArrayList<>();        for (EventType e:all             ) {            listDel.add(new TreeNodeForVueUtile(e.getEventTypeId(),e.getParentId()));        }        List<String> ids= TreeNodeForVueUtile.getChildrenIdByParent(listDel, id);        System.out.println("删除的集合是："+ids);        try {            eventTypeRepository.deleteByEventTypeIdIn(ids);        }catch (Exception e){            throw new ParameterInvalidException("传入的参数有误");        }    }    */}